{"paper_id": "3429789", "header": {"generated_with": "S2ORC 1.0.0", "date_generated": "2024-03-20T17:52:58.470283Z"}, "title": "Backend Development of Online Marketplace for Male Beauty Care Services", "authors": [{"first": "Ivan", "middle": ["Arnoldi"], "last": "Rahardja", "suffix": "", "affiliation": {"laboratory": "", "institution": "Information Technology Swiss German University Tangerang", "location": {"country": "Indonesia"}}, "email": "ivan.rahardja@student.sgu.ac.id"}, {"first": "Maulahikmah", "middle": [], "last": "Galinium", "suffix": "", "affiliation": {"laboratory": "", "institution": "Information Technology Swiss German University Tangerang", "location": {"country": "Indonesia"}}, "email": "maulahikmah.galinium@sgu.ac.id"}, {"first": "Randy", "middle": [], "last": "Anthony", "suffix": "", "affiliation": {"laboratory": "", "institution": "Information Technology Swiss German University Tangerang", "location": {"country": "Indonesia"}}, "email": "randy.anthony@sgu.ac.id"}], "year": "", "venue": null, "identifiers": {}, "abstract": "Online marketplace is a medium for connecting sellers and buyers. Besides that, it is currently more focus on selling products rather than selling services. Usually, if there are products and services in the same platform, the transaction systems will be automatically separated. The purpose of this research is to create an information system that can combine services and product which focuses on beauty for men. The platform can facilitate customers and vendor to buy and sell products and services easily. This research is more focus on the back-end system which uses Node JS as REST-API and MySQL as the database system. Furthermore, in the development phase, the scalability of the system is measured using Apache J Meter to find how many capacities that can be handled by the system. As a result, the system is able to accommodate up to 1500 requests. It is quite good result due to NodeJS has advantages in its features, which is nonblocking to process the data faster.", "pdf_parse": {"abstract": [{"text": "Online marketplace is a medium for connecting sellers and buyers. Besides that, it is currently more focus on selling products rather than selling services. Usually, if there are products and services in the same platform, the transaction systems will be automatically separated. The purpose of this research is to create an information system that can combine services and product which focuses on beauty for men. The platform can facilitate customers and vendor to buy and sell products and services easily. This research is more focus on the back-end system which uses Node JS as REST-API and MySQL as the database system. Furthermore, in the development phase, the scalability of the system is measured using Apache J Meter to find how many capacities that can be handled by the system. As a result, the system is able to accommodate up to 1500 requests. It is quite good result due to NodeJS has advantages in its features, which is nonblocking to process the data faster.", "cite_spans": [], "section": "Abstract", "sec_num": null}], "body_text": [{"text": "The online marketplace has become a trend because people want to buy and sell goods easily and faster. According to Niagahoster [1] (Niaga, 2018), online commerce is always increasing every year. The data shows that 2014 has value of 25.1 trillion and increased to 108. 4 Trillion in 2016 and in 2018 it was 144.1 trillion. Another data shows that since 2013, the male beauty care industry has positive growth. It occurs because men tend to spend more money on buying personal hygiene needs such as toiletries and other body treatments.", "cite_spans": [{"start": 128, "end": 131, "text": "[1]", "ref_id": "BIBREF0"}, {"start": 270, "end": 271, "text": "4", "ref_id": "BIBREF3"}], "section": "Introduction", "sec_num": "1"}, {"text": "Many marketplaces focus on selling products instead of services, for example, Tokopedia focuses on selling physical household products and other needs in the form of physical products. Therefore, an idea arises to resolve the existing problem which will be implemented to a platform named Kerenaja.com.", "cite_spans": [], "section": "Introduction", "sec_num": "1"}, {"text": "This platform seeks to combine product and service transactions in one transaction to assist customers in making transactions of products and services easily due to differences in the processing of product and service transactions. The difference is when we place an order for a product, we will receive a receipt number, while for ordering services, we will receive a booking code for the service we ordered. Therefore, most existing marketplaces do this separation to separate this order into different transactions.", "cite_spans": [], "section": "Introduction", "sec_num": "1"}, {"text": "There are several studies that discuss the advantages of using Node Js. The first research is from Sunil Maharjan [2] who used Node Js and Angular Js to create a system named Foglab. It is a web application that is useful to assist students in determining work they want by having an innovative design. They also use Node Js to create a backend system that can be scalable. Node Js is used because it has an advantage for non blocking architecture in the real time system, as has been shared by S. L Bangare [3] . Node Js could proceed the data processing operations 10x faster and accommodate large numbers of data. It also could work with various database type, for example Mongo DB and MySQL. It also works with data in JSON format.", "cite_spans": [{"start": 114, "end": 117, "text": "[2]", "ref_id": "BIBREF1"}, {"start": 508, "end": 511, "text": "[3]", "ref_id": "BIBREF2"}], "section": "Related Works", "sec_num": "2"}, {"text": "Peters [4] discusses about Node Js that works with Express Js. In web development, Node Js is an event driven that makes scalable applications with simple architecture. It is also can be integrated with Express Js, which is a middleware to handle requests and responses directed to certain ports that have been assigned. The researchers also discuss that Node Js has nonblocking feature to help dynamically create programming stages.", "cite_spans": [{"start": 7, "end": 10, "text": "[4]", "ref_id": "BIBREF3"}], "section": "Related Works", "sec_num": "2"}, {"text": "In the development stage, Node Js has Express Js to support creating simple servers that can made from the base.", "cite_spans": [], "section": "Related Works", "sec_num": "2"}, {"text": "According these related works, this research uses the same technology, namely Node Js with framework Express Js in real time and also scalable. Express Js can be used to shorten the development time because Node Js has a simple syntax and also scalable just in case for upgrading the system.", "cite_spans": [], "section": "Related Works", "sec_num": "2"}, {"text": "Figure 1 describes step by step how this research is done, starting from system analysis and design process until perform the system test, which are explained in details as follows.", "cite_spans": [], "section": "Methodology Figure 1 Backend Work Flow", "sec_num": "3"}, {"text": "The activity diagram is used to show the step by step of the system and the users process. Figure 2 shows one of the activity diagrams for one transaction cycle to reserve walk in transaction in the barber shop. It shows how a walk in transaction can be made by the Vendor. The walk-in feature is useful to facilitate the vendor in adding transactions so that finally can be combined with the transaction booked online by the customer. ", "cite_spans": [], "section": "Activity Diagram", "sec_num": "1."}, {"text": "ERD is created based on the activity and use case diagram.", "cite_spans": [], "section": "ERD", "sec_num": "3."}, {"text": "MySQL is used as a database service provider", "cite_spans": [], "section": "ERD", "sec_num": "3."}, {"text": "This backend system runs on the VPS Server. It contains Rest-API integrated with the database and all data needed by the front-end will be served by Rest-API as shown in Figure 5 . ", "cite_spans": [], "section": "Architecture diagram", "sec_num": "4."}, {"text": "Rest API is developed using Node Js with Express Js framework. It works as a service provider for Front-End Service.", "cite_spans": [], "section": "5.", "sec_num": null}, {"text": "After all functions have been developed, they are integrated with the front-end part of the system. The integration is required to test whether the front end can receive requests sent by the backend and the response sent by the backend. At this stage, we can get the request results match with the requests required by each user.", "cite_spans": [], "section": "Integration with front end", "sec_num": "6."}, {"text": "In this phase, the program is put into the VPS which has an Ubuntu system. In VPS, MySQL and Rest API are ready from this platform.", "cite_spans": [], "section": "7.Setting VPS", "sec_num": null}, {"text": "This stage is conducted by configuring the VPS to install Apache. The Apache server is used to run PHP MY Admin to manage the database MySQL. It also run the Node JS service so that it always run continuously from the server using a package node called Forever.", "cite_spans": [], "section": "Integration With VPS", "sec_num": "8."}, {"text": "To set up the domain, DNS Records A and CNAME via the VPS service provider website are created.", "cite_spans": [], "section": "Setting Up Domain", "sec_num": "9."}, {"text": "In this stage, utility test is conducted to check every response request made by the backend and the front end. The checking results should be same with the results of the existing functions and features.", "cite_spans": [], "section": "Perform Utility Test", "sec_num": "10."}, {"text": "In the final stage of development, final checking of all available functions and the final system is required.", "cite_spans": [], "section": "Finalizing Works", "sec_num": "11."}, {"text": "This research has two main results, which are suitability and scalability of the system. Therefore, suitability test is conducted to determine the suitability of the feature with the use case while scalability test is conducted to find out how many responses can be received by the existing VPS server. ", "cite_spans": [], "section": "Result", "sec_num": "4"}, {"text": "{ \"customer_id\" : 1, \"total_amount\": 70000, \"order_items\": [ { \"product_status\":1, \"subtotal\" : 40000, \"notes\": \" \", \"qty\": 1, \"product_id\": 1, \"status\": \"3\", \"extended_detail_type\": \"Reservasi\", \"extended_detail_time\" : \"13:00\", \"extended_detail_date\": \"2020-06-09\" }, { \"product_status\":0, \"subtotal\" : 30000, \"notes\": \"Tolong Taruh Di Depan Pagar\", \"qty\": 5, \"product_id\": 2, \"status\": \"3\", \"extended_detail_type\": \"\", \"extended_detail_date\" : \"\", \"extended_detail_time\": \"\" } ] } ", "cite_spans": [], "section": "JSON Request Sample :", "sec_num": null}, {"text": "Table 2 shows number of requests, time of sample generated, number of samples generated. During the execution of scalability test, not all responses return success but some responses return errors. The server is not responding to execute 1500 requests per second. Furthermore, a test on GET function has been conducted. As shown in table 3, the GET function successfully obtained the highest number of samples was 29360 sample, this sample obtained when the number of requests reached 1500 with sample time of 20999ms. Sample time average has an unstable value and there is a spike when the number of requests is high, so the way to make this sample time more stable is to do a MySQL cache, where the results of this MySQL cache can be shown in Table 4 . The purpose of this test is to find out how many capacity can be handled in terms of POST and GET requests. POST function can determine capacity of the POST request handled by the website.", "cite_spans": [], "section": "Server Not Responding", "sec_num": null}, {"text": "Backend Development of Online Marketplace for Male Beauty Care Services ICONETSI 2020, September 28-29, Tangerang, Banten, Indonesia ", "cite_spans": [], "section": "Server Not Responding", "sec_num": null}, {"text": "In conclusion, the existing E-Commerce has not fulfilled the requirements to do transaction for product sales and service orders in the same transaction. This system uses Node JS and it is implemented into the kerenaja,com platform. After being implemented into this platform, it can be concluded that the ability of this platform to receive requests is limited to handle 1500 POST requests. For the GET request, this platform response time before doing MySQL caching is really high with the highest numbers of response times at 21000 ms. After caching, it becomes more stable with the highest number of response times at 92 ms. Therefore, Node JS is a solution because it can be run on many platforms. It can also able to meet the needs of existing businesses by combining product and service sales transactions in one transaction. Node JS also has the advantage in programming, the Non-Blocking features can help to speed up the data processing.", "cite_spans": [], "section": "Conclusion", "sec_num": "5"}, {"text": "Node JS also has the advantage in terms of writing code where the code can be as simple as possible. As future works, the website quality assessment is required to see the gap analysis between actual condition and the user expectation as conducted by [5] ", "cite_spans": [{"start": 251, "end": 254, "text": "[5]", "ref_id": "BIBREF4"}], "section": "Conclusion", "sec_num": "5"}], "bib_entries": {"BIBREF0": {"ref_id": "b0", "title": "Pernah Mendengar Marketplace? Simak Pengertian & Jenisnya", "authors": [{"first": "Niagahoster", "middle": [], "last": "Blog", "suffix": ""}], "dblp_id": null, "year": 2020, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "Niagahoster Blog. 2020. Pernah Mendengar Marketplace? Simak Pengertian & Jenisnya. [online] Available at: <https://www.niagahoster.co.id/blog/marketplace-adalah/> [Accessed 21 July 2020].", "links": null}, "BIBREF1": {"ref_id": "b1", "title": "Markeplace web application with Foglab", "authors": [{"first": "Sunil", "middle": [], "last": "Maharjan", "suffix": ""}], "dblp_id": null, "year": 2017, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "Sunil Maharjan., 2017. Markeplace web application with Foglab. Helsinki Metropolia University of Applied Sciences. Bachelor Thesis.", "links": null}, "BIBREF2": {"ref_id": "b2", "title": "CUSTOMIZED FRAMEWORK FOR BACKEND USING NODE JS", "authors": [{"first": "S", "middle": [], "last": "Bangare", "suffix": ""}, {"first": "S", "middle": [], "last": "Gupta", "suffix": ""}, {"first": "M", "middle": [], "last": "Dalal", "suffix": ""}, {"first": "A", "middle": [], "last": "Inamdar", "suffix": ""}], "dblp_id": null, "year": 2017, "venue": "International Research Journal of Modernization in Engineering Technology and Science", "volume": "", "issue": "", "pages": "61--64", "other_ids": {"DOI": ["10.56726/irjmets33322"], "ISSNe": ["2582-5208"]}, "num": null, "urls": [], "raw_text": "S. Bangare, S. Gupta, M. Dalal. and A. Inamdar, 2017. Using Node.Js to Build High Speed and Scalable Backend Database Server. International Journal of Research in Advent Technology, pp. 61 -64.", "links": null}, "BIBREF3": {"ref_id": "b3", "title": "Building Rich Internet Applications with Node", "authors": [{"first": "Christian", "middle": [], "last": "Peters", "suffix": ""}], "dblp_id": null, "year": 2017, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "Christian Peters, 2017. Building Rich Internet Applications with Node.js and Express.js. Carl von Ossietzky University of Oldenburg, Germany.", "links": null}, "BIBREF4": {"ref_id": "b4", "title": "Website quality assessment for portal hospital Indonesia using Gap Analysis", "authors": [{"first": "Muhammad", "middle": ["Ghaffar"], "last": "Adipridhana", "suffix": ""}, {"first": "Maulahikmah", "middle": [], "last": "Galinium", "suffix": ""}, {"first": "Heru", "middle": ["Purnomo"], "last": "Ipung", "suffix": ""}], "dblp_id": null, "year": 2014, "venue": "2014 6th International Conference on Information Technology and Electrical Engineering (ICITEE)", "volume": "", "issue": "", "pages": "", "other_ids": {"DOI": ["10.1109/iciteed.2014.7007917"]}, "num": null, "urls": [], "raw_text": "M.G. Adipridhana, M. Galinium, H.P. Ipung, 2014, Website quality assessment for portal hospital Indonesia using Gap analysis. The Proceedings of 6 th International Conference on Information Technology and Electrical Engineering.", "links": null}, "BIBREF5": {"ref_id": "b5", "title": "Website quality assessment using gap analysis: Case Study: SGU Website & SGU student portal", "authors": [{"first": "M", "middle": [], "last": "Galinium", "suffix": ""}, {"first": "P", "middle": ["D"], "last": "Herwanto", "suffix": ""}, {"first": "J", "middle": [], "last": "Purnama", "suffix": ""}], "dblp_id": null, "year": 2016, "venue": "International Journal of Applied Engineering Research", "volume": "11", "issue": "15", "pages": "8662--8667", "other_ids": {}, "num": null, "urls": [], "raw_text": "M. Galinium, P.D. Herwanto, J. Purnama, 2016, Website quality assessment using gap analysis: Case Study: SGU Website & SGU student portal, International Journal of Applied Engineering Research, vol. 11, no. 15, pp. 8662-8667", "links": null}}}, "ner": [{"syntactic": ["translation systems", "information systems", "database systems"], "semantic": ["customized products", "information systems", "software frameworks", "service delivery", "database systems"], "union": ["customized products", "information systems", "translation systems", "software frameworks", "service delivery", "database systems"], "enhanced": ["mass customization", "computer systems", "computer aided language translation", "statistical machine translation", "machine translations", "computer programming", "information technology"], "Metrics": [], "ProgLang": [], "Dataset": [], "MathTerm": [], "IT Framework": [], "ISO": [], "Technology": [], "Terms": ["MySQL", "REST", "API"], "TechName": []}]}