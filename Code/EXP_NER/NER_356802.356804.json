{"paper_id": "356802", "header": {"generated_with": "S2ORC 1.0.0", "date_generated": "2024-03-20T17:52:54.602264Z"}, "title": "Backend Database Systems", "authors": [{"first": "Fred", "middle": ["J"], "last": "Maryanski", "suffix": "", "affiliation": {"laboratory": "", "institution": "Digital Equipment Corporation", "location": {"addrLine": "146 Main Street", "postCode": "01754", "settlement": "Maynard", "region": "Massachusetts"}}, "email": ""}], "year": "", "venue": null, "identifiers": {}, "abstract": "Backend database systems have been proposed as a solution to the problems of overloaded data processing installations. This tutorial examines backend database systems in terms of their basic structure, their potential benefits and drawbacks, and the problems facing developers of such systems. Several prototype systems are described, and research on extensions of the backend concept is discussed. The structure of the hardware and software components of backend database systems is presented in detail. The performance problems encountered in recent prototypes are pointed out and potential solutions indicated.", "pdf_parse": {"abstract": [{"text": "Backend database systems have been proposed as a solution to the problems of overloaded data processing installations. This tutorial examines backend database systems in terms of their basic structure, their potential benefits and drawbacks, and the problems facing developers of such systems. Several prototype systems are described, and research on extensions of the backend concept is discussed. The structure of the hardware and software components of backend database systems is presented in detail. The performance problems encountered in recent prototypes are pointed out and potential solutions indicated.", "cite_spans": [], "section": "Abstract", "sec_num": null}], "body_text": [{"text": "The introduction of generalized database management systems in the late 1960s resulted in a substantial increase in the capabilities of business data processing installations. Unfortunately, this increase in data processing capability has stimulated a corresponding increment in the demand for services. As a result many installations have reached the point of resource saturation. The obvious, yet increasingly unappealing, recourse to saturation is a mainframe upgrade. A recently devised alternative to such an upgrade is the offloading of database management functions from an existing mainframe to a directly attached minicomputer. This alternative configuration is known as a backend database management system (DBMS).", "cite_spans": [], "section": "INTRODUCTION", "sec_num": null}, {"text": "Since the development of the first prototype backend DBMS by Canaday et al. at Bell Laboratories [CANA74] , many commercial and research groups have evaluated and prototyped similar systems. However, according to the definitions presented here, the author is unaware of any backend DBMS available in the marketplace. In this paper the structure and operation of backend databases are presented, followed by a discussion of their economic and performance characteristics. The intent of this tutorial is to provide the reader with an understanding of the concepts embodied in backend databases and of the problems currently impeding the progress toward their emergence as commercially viable entities.", "cite_spans": [{"start": 61, "end": 105, "text": "Canaday et al. at Bell Laboratories [CANA74]", "ref_id": null}], "section": "INTRODUCTION", "sec_num": null}, {"text": "The concentration in this tutorial is on backend database systems realized in software on Von Neumann computers. The realization of backend systems using special-purpose database machines is a topic that also has attracted considerable attention and has been reported in depth recently [BERR77, HSIA79, LANG79]. Many of the issues discussed herein apply to both software and hardware backend systems. However, the in-depth presentation and analysis will center on software database systems.", "cite_spans": [], "section": "INTRODUCTION", "sec_num": null}, {"text": "Similarly, a substantial number of the issues presented in this tutorial are also of importance in the study of distributed database systems. Discussions of distributed databases can be found in AscH74, DEPP76, HARD78, LOWS77, MARY78a, MILL78, and Roth77b, The reader wishing to acquire some basic information on database systems is referred to the tutorials in KIM79, SHNE76, or SIBL76 or to recent textbooks on the subject [CARD79, DATE77, DEEN77, MART77, Ts]c77].", "cite_spans": [], "section": "INTRODUCTION", "sec_num": null}, {"text": "Section 1 presents the architecture of backend database systems, considering both hardware and software organization. In the second section the expected benefits and drawbacks of the backend DBMS concept are described in detail. Section 3 discusses several research excursions into the area of backend databases. In Section 4 extensions to the basic backend configura- tion are presented, and their impact is analyzed. The problems facing the implementors of backend databases are described in Section 5.", "cite_spans": [], "section": "INTRODUCTION", "sec_num": null}, {"text": "In its most elementary form a backend DBMS consists of a locally connected pair of computers, as shown in Figure 1 . The application programs are executed by the host computer, while the backend machine controls access to the database. The software functions necessary to support database application programs are divided between the host and backend computers according to the above rule.", "cite_spans": [], "section": "BACKEND DBMS ARCHITECTURE", "sec_num": "1."}, {"text": "In order to establish a foundation for understanding the manner in which a backend DBMS functions, let us first consider the operational sequence of application programs and a database management system in a single-machine environment. E y R a single-machine DBMS. The major components of a single-machine database system are", "cite_spans": [], "section": "BACKEND DBMS ARCHITECTURE", "sec_num": "1."}, {"text": "(1) the database software (DBMS);", "cite_spans": [], "section": "BACKEND DBMS ARCHITECTURE", "sec_num": "1."}, {"text": "(2) the application programs;", "cite_spans": [], "section": "BACKEND DBMS ARCHITECTURE", "sec_num": "1."}, {"text": "(3) the operating system and its buffers;", "cite_spans": [], "section": "BACKEND DBMS ARCHITECTURE", "sec_num": "1."}, {"text": "(4) the schema, which is a logical description of the entire database; (5) the subschemata, which describe the portion of the database available to the individual application programs and provide a mechanism for validating the program's access rights to the data; and (6) the work areas, which are shared by the application programs and the DBMS.", "cite_spans": [], "section": "BACKEND DBMS ARCHITECTURE", "sec_num": "1."}, {"text": "The sequence of operations in a singlemachine DBMS is described below. A retrieval operation is presented for illustrative purposes. The same general operational sequence applies to the other operations, such as storage, deletion, and modification.", "cite_spans": [], "section": "BACKEND DBMS ARCHITECTURE", "sec_num": "1."}, {"text": "Origination and Validation 1. The application program issues a request to the DBMS indicating the operation required and the data to be operated upon.", "cite_spans": [], "section": "BACKEND DBMS ARCHITECTURE", "sec_num": "1."}, {"text": "2. The request is validated against the subschema to ensure that the application program has the right to issue the request.", "cite_spans": [], "section": "BACKEND DBMS ARCHITECTURE", "sec_num": "1."}, {"text": "3. The DBMS checks its buffers to determine if the request can be satisfied with currently available data. If this is the case, Step 8 is executed next.", "cite_spans": [], "section": "Data Access", "sec_num": null}, {"text": "4. The DBMS requests that the operating system perform a transfer between the secondary storage device containing the requested data and the system buffers.", "cite_spans": [], "section": "Data Access", "sec_num": null}, {"text": "5. The operating system initiates the transfer between secondary storage and primary memory.", "cite_spans": [], "section": "Data Access", "sec_num": null}, {"text": "6. The data are transferred from secondary storage into the system buffers. This may require that a portion of the existing contents of the buffer space be written onto secondary storage in order to provide sufficient space for the new data without loss of previous information.", "cite_spans": [], "section": "Data Access", "sec_num": null}, {"text": "7. The operating system notifies the DBMS that the transfer is complete.", "cite_spans": [], "section": "Data Access", "sec_num": null}, {"text": "8. The DBMS places the data and status information in the work area of the application program that issued the request. Completion 9. The application program may access the data and status information in the work area in the course of its execution.", "cite_spans": [], "section": "Data Access", "sec_num": null}, {"text": "In order to form a backend database system, the functional modules of the singlemachine DBMS must be distributed between the host and backend machines. Communication and interface modules must be added. Figure 3 illustrates the software organization of a backend DBMS. The new components include a communication system that must exist on both computers, ", "cite_spans": [], "section": "Data Access", "sec_num": null}, {"text": "host and backend interface routines, and the database tasks that reside on the backend computer. The functions of the components required for extension into the backend environment are discussed in the following paragraphs.", "cite_spans": [], "section": "BACK-END", "sec_num": null}, {"text": "The communication system must provide the facilities for the transmission of commands, data, and status information between the host and backend machines. The control of the physical links, proper utilization of line protocols, transmission error detection and correction, processor and task synchronization, and management of message buffers are among the responsibilities of the communication system. Since a backend DBMS is a special case of a computer network, the communication facility need not contain all the features of a fuUscale network communication system. For example, a routing mechanism is unnecessary in a two-machine backend DBMS.", "cite_spans": [], "section": "BACK-END", "sec_num": null}, {"text": "The interprocessor link should be of at least channel speed if intermachine communication is not to become a bottleneck [CANA74, MARY76b] . Simulation studies have indicated that intermachine links with speeds of 1 Mbaud or greater will produce only minimal communication delays. Configurations with the host and backend processors sharing common memory have been proposed for situations in which quick response is necessary.", "cite_spans": [{"start": 120, "end": 128, "text": "[CANA74,", "ref_id": null}, {"start": 129, "end": 137, "text": "MARY76b]", "ref_id": null}], "section": "BACK-END", "sec_num": null}, {"text": "The interface routines are the processes that exchange information via the communication system. The host interface, HINT, is the process that is called by the application program when access to the database is desired. HINT must format the database request according to the requirements of the communication system and then transmit the request as a message to the backend interface via the communication system. When the database operation is complete, the data and status information returned as the result are transmitted from the backend interface to the host interface in the form of a message. H I N T must then unpack the message and return the information to the application program in the expected form. Since H I N T must service all the application programs on the host, it must be able to associate each returning message with a particular application program.", "cite_spans": [], "section": "BACK-END", "sec_num": null}, {"text": "The backend interface, BINT, behaves in a manner analogous to that of its host counterpart in that it serves as the vehicle for the interchange of information between the communication system and the database tasks. It must unpack and pack messages that are sent to and from the host interface via the communication system. The responsibility for directing a database request to the appropriate database task for execution lies with BINT. In systems in which the number of database tasks is dynamic, BINT must have access to a mechanism for the allocation and deallocation of tasks.", "cite_spans": [], "section": "BACK-END", "sec_num": null}, {"text": "Figure 3 shows a number of database tasks residing in the backend machine. If a backend is to operate efficiently, the DBMS module must be multiprogrammed [CANA74, MARY76b] . Therefore several tasks capable of presenting database requests to the DBMS must reside on the backend machine. The database requests presented to the DBMS by the database tasks are those that have originated in the application program and are transmitted through the interface routines and the communication system to the database tasks. The database task acts as a surrogate on the backend machine for an application program on the host. When the database request is complete, the database task returns the resulting data and status information to the backend interface, which initiates the transmission of the result to the host machine.", "cite_spans": [{"start": 155, "end": 163, "text": "[CANA74,", "ref_id": null}, {"start": 164, "end": 172, "text": "MARY76b]", "ref_id": null}], "section": "BACK-END", "sec_num": null}, {"text": "The sequence of execution for a database operation in a single-machine environment was outlined earlier. The operational sequence for a database command in a backend DBMS is presented here to illustrate the basic difference in the two configura- tions. Figure 4 depicts the flow of information in a backend DBMS.", "cite_spans": [], "section": "BACK-END", "sec_num": null}, {"text": "Origination and Validation. The origination and validation occur in the same fashion as in the single-machine case, with H I N T performing the actions previously executed by the DBMS.", "cite_spans": [], "section": "BACK-END", "sec_num": null}, {"text": "Host-to-Backend Communication. A message containing the database request is sent from H I N T to B I N T via the communication system. Data Access. B I N T passes the request to the proper database task, which calls the DBMS. The database is then accessed in the same manner as on a single-machine system. The result of the operation is passed through the database task to BINT.", "cite_spans": [], "section": "BACK-END", "sec_num": null}, {"text": "Backend-to-Host Communication. A message containing the data and status information produced as a result of the op- Completion. HINT places the result into the work area, where it may be accessed by the application program.", "cite_spans": [], "section": "BACK-END", "sec_num": null}, {"text": "Backend database systems have received considerable attention owing to their potentiai for increasing the performance of installations with heavy database requirements. The research into these systems has identified several important areas in which the utilization of backend machines may provide considerable benefits. However there are also certain drawbacks that can arise if the backend concept is not realized properly. In this section we evaluate the potential effects of a backend DBMS relative to a number of factors crucial to most data processing installations.", "cite_spans": [], "section": "BENEFITS AND DRAWBACKS", "sec_num": "2."}, {"text": "A backend DBMS can improve the throughput of a heavily loaded mainframe if the following conditions are met: the backend machine is multiprogrammed, a high-speed link is utilized, and a substantial demand for database access exists [CANA74, HEAC75, MARY76b, MARY78b, ROSE77b] . The previous statement is based on prototype and simulation experiments rather than experience with production systems because of the current status of backend DBMS development. The throughput increment depends on the overall workload. However, an improvement of approximately 25 percent has been projected from many experiments [HEAc75, MARY76b, MARY77, MARY78b]. The reason for the performance increment is the concurrent operation of the host with backend processors and secondary storage devices. The addition of the backend processor permits application program execution, DBMS execution, and secondary storage access to occur simultaneously.", "cite_spans": [{"start": 241, "end": 248, "text": "HEAC75,", "ref_id": null}, {"start": 249, "end": 257, "text": "MARY76b,", "ref_id": null}, {"start": 258, "end": 266, "text": "MARY78b,", "ref_id": null}, {"start": 267, "end": 275, "text": "ROSE77b]", "ref_id": null}], "section": "Performance", "sec_num": null}, {"text": "On the other hand, a performance penaity is incurred by the introduction of the interface and communication software and the transmission time of the intercomputer link. In fact, the execution of a single database command requires more time in a backend DBMS than in a single-machine system because it must pass through more modules. In order to realize the performance benefits of concurrency, the operation of both CPUs and the secondary storage devices must be synchronized so that bottlenecks are minimized. This synchronization depends on both system structure and jobstream characteristics. If a backend DBMS is to achieve increased performance, the gains due to concurrency must outweigh the losses caused by communication overhead. In situations where database access is not a system bottleneck, the introduction of a backend machine may degrade rather than improve performance [MARY78b].", "cite_spans": [], "section": "Performance", "sec_num": null}, {"text": "As mentioned in the introductory section, a primary motivation for the backend DBMS work is the development of an economic alternative to the upgrading of a large mainframe. The attachment of a dedicated minicomputer to an existing mainframe is an order of magnitude cheaper, in terms of hardware costs, than replacing the mainframe with a larger machine [HEAC75, MARY76a] . But factors other than the costs of the processors must be considered in the evaluation of the economic alternatives. The media used for the storage of the database on the existing mainframe and the backend machine must be compatible in order to avoid a substantial conversion cost. Backend DBMS communication and interface software must also be included in the pricing equation. When all factors are considered, the great difference in price between that of a mainframe to replace the entire existing system and of a minicomputer to assume the database function is the factor that makes a backend DBMS a viable economic alternative to a mainframe upgrade [CANA74, HEAC75, LOWE76, MARY76a, NOLA77].", "cite_spans": [{"start": 355, "end": 363, "text": "[HEAC75,", "ref_id": null}, {"start": 364, "end": 372, "text": "MARY76a]", "ref_id": null}], "section": "Cost", "sec_num": null}, {"text": "The basic determination to be made concerning reliability is whether a tightly cou-pied pair of machines is more reliable than a single computer. Since there are more components in a backend DBMS composed of two machines than there are in a singlemachine system, the incidence of failure, of either software or hardware, is higher. However, in a backend DBMS, the necessity for intermachine communication causes the machines to check the information passed between them; the existence of a malfunction may be detected more quickly [HEAC75], thus reducing the length of time in which the system operates with an undetected error.", "cite_spans": [], "section": "Reliability", "sec_num": null}, {"text": "A backend DBMS provides a solution to one type of security problem, but it is by no means a panacea in terms of security. If the backend machine is dedicated completely to the database management function with no resident application programs, it is not possible for a malevolent programmer to access the data files independently of the DBMS [HEAc75, LOWE76, ROSE77b]. But in many single-machine database systems under various operating systems it is possible for an application program to access directly any file if the proper identification information is known. Placing all data files on a separate machine forces all access to occur through the DBMS and so eliminates this type of security breach.", "cite_spans": [], "section": "Security", "sec_num": null}, {"text": "In order to gain unauthorized access to data in a backend DBMS, the intruder must appear to the DBMS as a valid user. Thus a backend DBMS causes the illicit user to concentrate penetration efforts on defeating the password mechanism or monitoring the behavior of either the host interface routine or the communication system. The system designer must realize the possible vulnerable points of a backend DBMS and make every effort to improve security in these areas [CSUR79].", "cite_spans": [], "section": "Security", "sec_num": null}, {"text": "Attaching a computer dedicated to database management to a general-purpose", "cite_spans": [], "section": "Additional Resources", "sec_num": null}, {"text": "\u2022 9", "cite_spans": [], "section": "B a c k e n d Database Systems", "sec_num": null}, {"text": "processor can free a substantial portion of the processor's resources. A review of Figures 2 and 3 indicates that the host machine (which previously contained both database and application modules) no longer must maintain the DBMS software, the schema, and the database page buffers. The primary memory released by the transfer of these entities to the backend machine is at least partially occupied by the host interface routine and the communication software. If the interface and communication software do not require all of the released space, then additional application programs can reside on the host machine; the result is an increase in concurrency and throughput [MARY76a, ROSE77b] .", "cite_spans": [{"start": 673, "end": 682, "text": "[MARY76a,", "ref_id": null}, {"start": 683, "end": 691, "text": "ROSE77b]", "ref_id": null}], "section": "B a c k e n d Database Systems", "sec_num": null}, {"text": "The preceding discussions emphasize that the size of the interface and communication software is a critical backend DBMS performance factor. The host interface routine requires relatively little memory-approximately 5K in some prototypes [CANA74, MARY79]. The memory requirements of the communication software depend on the generality of the functions performed. A backend DBMS is a limited, special-case network and does not require a full spectrum of message handling features in the communication system. The development of a minimal communication package as used in the XDMS prototype [CANA74] is likely to provide the best service with the smallest demand on resources.", "cite_spans": [], "section": "B a c k e n d Database Systems", "sec_num": null}, {"text": "The principle of modular design is generally applied in the creation of both hardware and software in order to produce well-defined, reliable, and correct devices and programs. A backend DBMS is an example of modular design at the computer system level. The basic components are machines that perform either database or application functions. This separation of functions provides the basis for several such interesting extensions to the basic backend configuration as multiple-host or backend processors, distributed databases, and database machines. These extensions are discussed in Section 4. ", "cite_spans": [], "section": "Modularity", "sec_num": null}, {"text": "There have been several major research efforts focusing on backend databases. The projects described here include XDMS at Bell Laboratories, the IDMS backend produced by Cullinane for the U.S. Army, the backend studies at Kansas State University, and the MADMAN machine by General Electric. Other related research projects are also mentioned briefly.", "cite_spans": [], "section": "RESEARCH EFFORTS", "sec_num": "3."}, {"text": "The principal motivating factors in the development of the first backend DBMS were interests in the CODASYL data model [CODA78a, CODA78b] and in minicomputer applications. The name \"backend\" was coined by the members of the project team as a takeoff on the concept of a frontend processor. The backend DBMS implemented by Canaday's group resided on the hardware configuration depicted in Figure 5 . The DMS-1100 database management system, which is a CODASYL-based package, existed on the UNIVAC 1108. A tailored CODASYL DBMS, operating system, and communication package were written for the META-4 machine. A personnel application system was moved from the UNI-VAC 1108, under DMS-1100, to the backend DBMS for testing purposes. It is important to note that the UNIVAC machine remained available to other applications during the course of the development and testing of the backend DBMS.", "cite_spans": [], "section": "XDMS", "sec_num": null}, {"text": "The Bell Laboratories prototype, known as XDMS, performed successfully using a personnel database for several months. The primary purpose behind the implementation of XDMS was to demonstrate the feasibility of the backend concept. From this viewpoint, XDMS was an unquestionable success.", "cite_spans": [], "section": "XDMS", "sec_num": null}, {"text": "The groundbreaking effect of XDMS must be kept in mind when evaluating it in terms of the potential benefits presented in the previous section. The XDMS system performed to the satisfaction of the developers. Although no performance statistics are available, the paper by Canaday et al.", "cite_spans": [], "section": "XDMS", "sec_num": null}, {"text": "[CANA74] points out the need for better performance and suggests that increased communication bandwidth is the mechanism to achieve this goal. For the prototype the machine was connected using a 2-kbaud communications link rather than a channelto-channel adapter with a capacity of the order of 1 Mbaud. Since the host sends a single database command to the backend, the ratio of communication time to processing time can be quite substantial. In systems transmitting single database commands, better performance under heavy workloads is observed for application programs composed predominantly of complex statements than for those with primarily simple statements. The complexity of a database statement can be measured in terms of the amount of backend processing and number of secondary storage accesses required to complete the statement. The reason for the improved performance is that complex statements keep the backend machine busier, thus providing more concurrent operation among host and backend processors. For simple database commands, only a small amount of the host processing load is transferred to the backend computer.", "cite_spans": [], "section": "XDMS", "sec_num": null}, {"text": "Cost, offioading of resources, and modularity were all important considerations in the XDMS design. The META-4 computer was selected on the basis of its expected cost/performance ratio for the project. A key factor in the selection of META-4 was its microprogramming capabilities. Initially, the designers felt that several primitive database functions would have to be implemented in microcode to achieve ade-", "cite_spans": [], "section": "XDMS", "sec_num": null}, {"text": "\u2022 11 quate performance. However this enhancement did not prove necessary.", "cite_spans": [], "section": "B a c k e n d Database Systems", "sec_num": null}, {"text": "The XDMS system provided a locking mechanism to control concurrent updates and a rollback and recovery feature. For an explanation of the problems associated with locking, rollback, and recovery see DHAL77, EDEL74, FOSS74, GIOR76, SAYA74, or VERH78. No special security facilities were included in the system.", "cite_spans": [], "section": "B a c k e n d Database Systems", "sec_num": null}, {"text": "The modular system organization and offloading of host resources to the backend are significant achievements of the XDMS project. The XDMS project is a landmark in the database management area, since it introduced an alternative database architecture and spawned an enormous amount of follow-on research.", "cite_spans": [], "section": "B a c k e n d Database Systems", "sec_num": null}, {"text": "The U.S. Army Computer Systems Command was facing the problem of saturation at its data processing installations, which handle the Army's everyday business data processing tasks. Inspired by the success of XDMS, Computer Systems Command sponsored research efforts by the Cullinane Corporation and Kansas State University; these eventually led to the synthesis of prototype backend database systems by both groups. The Cullinane effort concentrated on extending IDMS, its IBM 360/ 370 database package, to operate in a backend environment [CULL75].", "cite_spans": [], "section": "IDMS", "sec_num": null}, {"text": "The prototype system created by the Cullinane Corporation resembles XDMS in several ways. Both database packages are CODASYL-based, and in both cases the database functions are supported by a minicomputer coupled to a large mainframe. In the case of the IDMS prototype, a PDP-11/70 performed the database functions for an IBM 370/158.", "cite_spans": [], "section": "IDMS", "sec_num": null}, {"text": "Perhaps the most significant difference between the Bell Laboratories and Cullinane efforts is that the vendor-supplied operating system was retained for the IDMS backend. CuUinane developed a new version of IDMS, known as IDMS-11, for the PDP-11 as part of the project. The communication software was implemented by Cullinane based on a design provided by Kansas State University [WALL76]. However the remainder of the system software on the PDP-11/70 was supplied by the vendor.", "cite_spans": [], "section": "IDMS", "sec_num": null}, {"text": "The IDMS prototype operation is based on the transmission of a single database command to the backend, as in XDMS. Hence it is susceptible to the possibility of communication overhead outweighing the performance benefits of concurrent operation. As with XDMS, a low-speed communication line (4800 baud) was utilized in the initial prototype. Extensive tests of the IDMS backend were performed by the U.S. Navy. When the system is run with a single application program, the response time is predictably slow. However, tests of a multiprogramming environment have indicated that three application programs can complete execution in the same time as one application program in a uniprogrannning environment. These results demonstrate that when a backend DBMS executes a single program, communication and task switch overhead have a severe impact on performance. But in a multiprogramming environment, concurrent operation of the host and backend processors and the disk tend to mitigate the overhead. Therefore more work can be accomplished in a given time period. Naturally, the workload can be increased beyond the capacity of the system, thus resulting in performance degradation. The determination of the peak workload is an important step in the tuning of a backend DBMS configuration.", "cite_spans": [], "section": "IDMS", "sec_num": null}, {"text": "The work on the IDMS prototype was very strongly motivated by cost and resource configurations. The sponsors of the project viewed the backend DBMS as an economic means of increasing the capacity of their overtaxed systems. The primary and secondary storage on the host computer freed by the introduction of the backend DBMS can be allocated to existing applications.", "cite_spans": [], "section": "IDMS", "sec_num": null}, {"text": "Security was also one of the motivating factors for the support of the IDMS backend project. Future plans call for the development of a highly secure backend DBMS.", "cite_spans": [], "section": "IDMS", "sec_num": null}, {"text": "The IDMS backend prototype is significant in that it marks the first entrance by a database vendor into the area of backend systems. Although the initial version was carried only to the prototype stage, the vendor is expected to pursue the backend concept fu~her.", "cite_spans": [], "section": "IDMS", "sec_num": null}, {"text": "The second backend database research program supported by the U.S. Army Computer Systems Command was conducted by Kansas State University. The initial phase of this work centered upon an evaluation of the feasibility of a backend DBMS in a typical data processing environment [MARY76a] . The economic and performance benefits and penalties of a backend DBMS were weighed during this study. The backend concept was judged attractive to the point that the support of the CuUinane project was initiated by the Army.", "cite_spans": [{"start": 276, "end": 285, "text": "[MARY76a]", "ref_id": null}], "section": "KSU", "sec_num": null}, {"text": "Much of the research effort at Kansas State has concentrated on the development of network communication software [WALL76] as a key component of two prototype backend database systems [FARR79, Hous78, MARY79]. The hardware topologies used for backend databases are depicted in Figure 6 . The KSU prototypes were developed purely for research purposes. As a result all machines supported other computing activities to various degrees. Neither the database packages nor the operating systems were altered during the prototype development. In addition, only a low-speed, telephone-line link was possible among the machines, which severely limited system performance. The first prototype system [Hous78, MARY79] involved the TOTAL database package executing with an Interdata 8/32 host and either the ITEL AS5 or Interdata 7/32 as the backend. The software structure corresponds to that presented in the first section of this paper. In this prototype the key software components were implemented in a variety of languages. TOTAL is written in assembly language on both the Interdata and ITEL computers; the interface routines and the application programs are in Cobol; the communication system is implemented in Concurrent Pascal on the Interdata machines and in assembly language on the ITEL. This potpourri of implementation languages resulted from a design constraint to develop interface software that linked together existing application, communication, and database modules.", "cite_spans": [], "section": "KSU", "sec_num": null}, {"text": "A key difference in this prototype backend DBMS was the use of a large mainframe as a backend to a minicomputer host. There was a marked performance difference between the system with the ITEL backend and that with the Interdata 7/32 backend. Overall, the ITEL backend system showed a 41 percent improvement in terms of response time when compared with the minicomputer backend.", "cite_spans": [], "section": "KSU", "sec_num": null}, {"text": "One of the difficulties of the first KSU prototype was that the interpretive nature of Concurrent Pascal executing under the SOLO operating system [BRIN77] required additional routines to permit calls to and from the Cobol interface modules. In order to reduce the complexity entailed in these translation routines, a second prototype that used Concurrent or Sequential Pascal for all modules was developed [FARR79]. This design decision limited the prototype to the Interdata machines. The second KSU prototype differs from other efforts in that its driving factors were modularity and portability rather than cost or performance. Although cost measures are very difficult to apply in a university environment, it is possible to compare roughly the performance of the two prototypes. The comparison cannot be precise since the Pascal design restriction forced the substitution of a minimal locally written DBMS for TOTAL in the second prototype. In approximately the same environments, the second prototype responds from 1.5 to 3 times faster than the first system.", "cite_spans": [], "section": "KSU", "sec_num": null}, {"text": "The development of portable backend database software facilitates the extension of the backend concept to the multipleprocessor configurations discussed in the next section. Also, the linking together of heterogeneous host and backend computers in Figure 8 [HuTc78], can be realized. This arrangement permits high-speed interprocessor communication with minimal overhead. In the configuration shown in Figure 8 , the disks remain connected to the host, unlike the previously described backend database systems. In the MADMAN backend system, the host initiates the disk I/O operations, but the information is transferred to common memory, which is the PDP-11/70 main memory. The UNIBUS windows provide the backend with the ability for simultaneous access to buffers containing database requests and information transferred to or from secondary storage. As with the backend processors in the aforementioned systems, the LSI-11 is multiprogrammed to permit overlap of I/O and CPU operations.", "cite_spans": [], "section": "KSU", "sec_num": null}, {"text": "MADMAN differs in several significant ways from the other backend systems. The most important distinction is the direct connection of the host and backend via shared memory and bus linkages. This architecture provides faster physical communication links than in the other backend systems and also greatly simplifies the software required to transmit information between machines. Device-dependent drivertype software is required for communication in MADMAN, while the other backend systems are built with more sophisticated communication packages. Because primary memory and CPU cycles were deemed to be the critical resources in the MADMAN environment, only the CPU portion of the database activity is off-loaded to the backend. Disk operations are still performed by the host. The MADMAN designers felt that primary memory and CPU cycles were the key resources in this situation. In this sense, the MADMAN architecture diverges radically from the organization of the other backend systems.", "cite_spans": [], "section": "Backend Database Systems", "sec_num": null}, {"text": "MADMAN is built from smaller processors than the other backend systems. It is the only system with a microprocessor backend machine.", "cite_spans": [], "section": "Backend Database Systems", "sec_num": null}, {"text": "Cost was the motivating factor in the selection of the LSI-11 as the backend machine for MADMAN. Another aim of the system was portability among several existing PDP-11 minicomputers. The intention is to be able to tie an LSI-11 to any of the minicomputers to form a backend DBMS system. In addition to cost and portability, a goal of the MADMAN system is increased performance. Although it appears that the design has accomplished the first two goals, extensive testing is still required to determine if the MADMAN design is suitable for the factory control environment.", "cite_spans": [], "section": "Backend Database Systems", "sec_num": null}, {"text": "The presence of a PDP-11 host, smaller than a PDP-11/70, requires minor modifications to the architecture of the MADMAN backend DBMS. These changes, along with a detailed account of the design of the system, are presented in a paper by Hutchison and Roman [HuTc78] .", "cite_spans": [{"start": 236, "end": 264, "text": "Hutchison and Roman [HuTc78]", "ref_id": null}], "section": "Backend Database Systems", "sec_num": null}, {"text": "In the second section of this paper, six potential benefits of backend databases were identified. Since we have presented four prototype systems, we can now determine how close these prototypes have come to providing these benefits.", "cite_spans": [], "section": "Analysis of Prototypes", "sec_num": null}, {"text": "Although improved performance is a necessity if backend database systems are to become commercially viable, none of the prototypes has exhibited this capability.", "cite_spans": [], "section": "Performance", "sec_num": null}, {"text": "The XDMS, IDMS, and KSU prototypes all are limited by the speed of the machine interconnection. The use of a high-speed line between the host and backend certainly would increase the throughput of these systems. However the amount of the increase is still unknown. The shared memory connections of the MADMAN system have the potential to minimize the communication overhead. But thus far testing has not yet confirmed the viability of the MADMAN architecture.", "cite_spans": [], "section": "Performance", "sec_num": null}, {"text": "The studies supported by the U.S. Army [CULL75, MARY76a] strongly endorsed a backend system as an economic alternative to the upgrading of an overloaded main-frame. The MADMAN system is intended for use as an economical factory control system. The common denominator of the enterprises that decided that a backend DBMS is attractive from a cost standpoint is that a large number of installations were involved. In situations such as these, the price differential between a minicomputer and a mainframe or between a microcomputer and a minicomputer can be multiplied by the number of installations. The savings in hardware thus outweigh the cost of developing the backend system architecture.", "cite_spans": [], "section": "Cost", "sec_num": null}, {"text": "None of the backend DBMSs have sufficient operating history to demonstrate that they are more or less reliable than a singlemachine DBMS. XDMS is the only system that contained rollback and recovery software tailored for a backend system. A serious evaluation of the reliability of backend databases must be deferred until operational systems can be studied.", "cite_spans": [], "section": "Reliability", "sec_num": null}, {"text": "The concept of a secure backend is considered viable by researchers in the security area [HART78, HSIA78]. However none of the reported work on 'the prototype backend systems substantiates this claim, despite the fact that one of the motivating factors behind the support of the IDMS prototype was the secure backend concept. There has been some investigation of the applicability of backend database systems to security environments, but the results of this work are not yet available.", "cite_spans": [], "section": "Securi~", "sec_num": null}, {"text": "Freeing primary memory on the host machine was an important goal of the four backend prototypes. This is one potential benefit that has been realized in all prototypes. Owing to the limited testing on the prototypes, the impact of the additional memory on overall system performance cannot be evaluated.", "cite_spans": [], "section": "Additional Resources", "sec_num": null}, {"text": "The designers Of all four prototype systems view the backend database as an architecture that can easily be expanded to provide efficiency and portability in database management. Some work was carried out at Bell Laboratories to include an IBM-370 host in the XDMS configuration. The PDP-11/70 serving as the backend machine in the IDMS prototype is designed to interface with any of several mainframe hosts, including IBM-360/370 and CDC-6400 machines. The second KSU prototype was built using portable communication and interface software. The software developed in that project can be moved to any machine supporting Concurrent Pascal. The MADMAN LSI-11 backend machine is designed to interface to a.variety of PDP-11 hosts.", "cite_spans": [], "section": "Modularity", "sec_num": null}, {"text": "The modular structure of the backend architecture has resulted in a fair degree of success with respect to portability. In some large enterprises with heterogeneous hardware, the portability embodied in the backend concept may be sufficient justification for the use of a backend DBMS.", "cite_spans": [], "section": "Modularity", "sec_num": null}, {"text": "In addition to the work mentioned in the preceding paragraphs, the properties of backend databases have been studied by several other groups. Lowenthal [LowE76] analyzes thoroughly many aspects of backend databases and presents both technical and economic arguments for the backend concept. Lowenthal and his colleague Rosenthal [RosE77a, RosE77b] both analyzed the resource requirements for a backend machine and arrived at the conclusion that effective backend processing requires a very powerful minicomputer with the following features: an address space of the order of 1 Mbyte, a large range of microprogramming features, high-performance I/O capabilities, and special byte and pointer manipulation instructions. These specifications exceed the power of the minicomputers used in the previously described prototype sys-terns. As of this time, a full-scale commercial implementation has not provided a realistic measure of the computational power required by the backend machine.", "cite_spans": [{"start": 142, "end": 160, "text": "Lowenthal [LowE76]", "ref_id": null}], "section": "Additional Work", "sec_num": null}, {"text": "The Datacomputer developed by the Computer Corporation of America [MAre75] can be classified as a backend machine available to other nodes in the Arpanet. The Datacomputer is a PDP-10 with a large amount of off-fine storage, projected to be able to support databases of the order of one trillion bits. All communication with the Datacomputer is done in a special language, Datalanguage, which provides both definitional and manipulative capabilities.", "cite_spans": [], "section": "Additional Work", "sec_num": null}, {"text": "Although there is some conceptual similarity between the Datacomputer and the backend machines described previously, the proposed applications differ radically. Instead of serving as a database processor locally connected to a host machine, the Datacomputer is designed to serve as the basic component in a geographically distributed database network known as SDD-1 [ROTH77a]. We consider only locally connected backend computers in this presentation.", "cite_spans": [], "section": "Additional Work", "sec_num": null}, {"text": "The concept of performing the database functions using special-purpose hardware has been put forth by several groups of researchers [BERR77, HSIA79]. These machines have been proposed to operate either as backend machines or as intelligent device controllers which expedite the performance of the database functions. Database machines can achieve high performance at low cost by simultaneously accessing all of the memory in the execution of a single database instruction. This parallel access is accomplished through the use of associative memories or specialized disk control devices. In a configuration utilizing a database machine as a backend, the database operations reside in the database machine, which executes these operations as its primitive instructions. The interface and communication functions remain in the backend processor.", "cite_spans": [], "section": "Additional Work", "sec_num": null}, {"text": "Compared with conventional systems, database machines have the ability to per- form many database operations at very high speeds [OZKA77] at greatly reduced costs [HSIA78]. It is a distinct possibility that the economy and speed gained from the use of specialized hardware will result in configurations such as that depicted in Figure 9 , and may well be very common in the next decade. In Figure 9 further functional specialization is obtained by dedicating a processor to the communications function. This configuration has been utilized in the design of the MININET [PEEB75, PEEB78] and MIMICS database networks [WALL76].", "cite_spans": [], "section": "Additional Work", "sec_num": null}, {"text": "\u2022 F . J. Maryanski", "cite_spans": [], "section": "Additional Work", "sec_num": null}, {"text": "The basic two-processor backend DBMS, implemented entirely in software, has proved to be the basis for a substantial number of configurations which can be expected to have a major impact on the field of database management. The extensions presented here involve incorporating additional processors into the configuration, as in the cases of the multiple-host or multipie-processor backend DBMS. In addition, efforts on distributed database systems [AscH74, DEPP76, HARD78, LOWE77, MARY78a, MILL78, ROTH77b] and database machines [BERR77, HSIA79, LANG79] are related to the research in backend database systems but will not be treated further in this paper.", "cite_spans": [], "section": "EXTENSIONS", "sec_num": "4."}, {"text": "The most elementary extension to the basic backend DBMS configuration results from attaching several host processors to a backend machine, as in Figure 10 . In this configuration, known as the multiple-host backend DBMS [CANA74, MARY76C, MARY78C], all database requests from all host processors are performed at the backend machine. This extension is easily realizable if the communication system permits the backend processor to exchange information with multiple machines. The only addition to the basic operational sequence is that the ", "cite_spans": [], "section": "Multiple-Host Backend DBMS", "sec_num": null}, {"text": "backend interface routine must maintain a correspondence between the database requests that it receives and the identity of the backend interface routine which transmitted the request. This correspondence can be maintained if a host identifier is associated with each database request.", "cite_spans": [], "section": "BACKEND I", "sec_num": null}, {"text": "A multiple-host backend DBMS presents a very efficient method of utilizing system resources, since a single copy of the database software can serve apphcation programs on multiple machines. Thus the amount of additional main memory available for applications and the degree of concurrency in the system increase linearly with the number of hosts in the multiplehost configuration. The performance is bounded by the capacity of the backend machine, and so the number of hosts that can be serviced efficiently is a function of the database demand and the power of the backend machine. The multiple-host backend DBMS appears to be most attractive when several hosts with light to moderate database requirements can be connected to a single backend. This configuration will free a substantial amount of main memory and still provide reasonable throughput.", "cite_spans": [], "section": "BACKEND I", "sec_num": null}, {"text": "The multiple-host arrangement exploits the security benefits of the backend DBMS by concentrating the database activity of several machines at one central point. As discussed previously, the efforts to defeat and protect the security of the data are limited to a relatively small number of alternatives in a backend database system. chines. A high degree of concurrency can be achieved at a low cost, thus producing a cost/performance ratio that makes this backend configuration economically attractive.", "cite_spans": [], "section": "BACKEND I", "sec_num": null}, {"text": "A multiple-processor backend DBMS can be realized in a number of configurations. Three approaches--distribution by data, distribution by function, and pipelining--are explained here. Figure 12 depicts multiple backend processors distributed by data. Each processor can execute the full range of database functions on a subset of the database. A controlling processor is required to issue the commands to the database processors and to assemble the individual responses into the result of the database request for transmission to the host. The backend node in this configuration is actually single-threaded, since all database processors operate upon the same request in parallel. The expectation is that the concurrent execution of the individual commands will result in an overall increase in throughput. A study of a similar configuration by Ozkarahan, Schuster, and Sevcik [OZKA77] indicates that the response time improvement is strongly dependent on the type of database request. Operations such as a simple retrieval or updates are very well suited for simultaneous execution by multiple processors. However, an operation such as relational cross-retrieval, which involves processing records (or tuples) sequentially, is not performed more quickly than in a single-processor configuration.", "cite_spans": [{"start": 844, "end": 854, "text": "Ozkarahan,", "ref_id": null}, {"start": 855, "end": 864, "text": "Schuster,", "ref_id": null}, {"start": 865, "end": 884, "text": "and Sevcik [OZKA77]", "ref_id": null}], "section": "Multiple-Processor Backend DBMS", "sec_num": null}, {"text": "A multiple-processor backend DBMS distributed by function is pictured in Figure 13 . In this configuration a number of special-purpose microprocessors are governed by the controlling processor. Each functional processor performs a limited number of database functions over the entire database. As indicated in the figure, common functions such as retrievals may be embodied in several processors. The controlling processor performs the backend interface function of parceling out the database requests to the appropriate functional processors and then transmitting the results to the host. A functionally distributed multiple-processor backend permits concurrent execution of several database requests, thus providing the potential for a high degree of throughput. However, the problems associated with the updating of common data by multiple processors arise. Therefore some mechanism for concurrency control must be included in the system. The alternatives are either to provide for communi- cation among the functional processors which may access shared data, as in Figure 13 , or to include a processor dedicated to the concurrency control function, as shown in Figure 14 . In the configuration of Figure 14 each secondary storage access of shared data must be verified by the concurrency control processor.", "cite_spans": [], "section": "Multiple-Processor Backend DBMS", "sec_num": null}, {"text": "The third approach to the synthesis of a multiple-processor backend DBMS employs the technique of pipelining. The execution of a database request by a backend machine involves several discrete steps. As illustrated by Figure 15 , one or more processors can be dedicated to the execution of each of these steps. In a pipelined backend machine several database requests can be in the various stages of processing simultaneously. Bottlenecks can be alleviated by the inclusion of additional processors at each stage. Access to shared data is monitored by a dedicated processor in a manner similar to that of the functionally distributed backend machine.", "cite_spans": [], "section": "Multiple-Processor Backend DBMS", "sec_num": null}, {"text": "All three multiple-processor backend DBMS configurations rely on a large number of concurrently executing microprocessors and high-speed interconnections to increase throughput at a reasonable cost. Advances in technology are making such configurations feasible, as evidenced by the developmental efforts of several manufacturers in this area [HsIA79].", "cite_spans": [], "section": "Multiple-Processor Backend DBMS", "sec_num": null}, {"text": "Although the concept of the backend database system has been well known for several years and though in many cases the economic and performance benefits outweigh the drawbacks, still no commercially available backend database systems, ac- cording to the definitions presented in this paper, are known to the author. Some in-staUations are investigating home-grown backend implementations, but the concept will not have a significant impact until a backend DBMS is marketed and supported by a major vendor. A number of implementation difficulties have hampered the commercial development of backend databases.", "cite_spans": [], "section": "IMPLEMENTATION PROBLEMS", "sec_num": "5."}, {"text": "The more important of the implementation issues are discussed in this section.", "cite_spans": [], "section": "IMPLEMENTATION PROBLEMS", "sec_num": "5."}, {"text": "A backend DBMS can be viewed as a twonode local network. The means of communication between the two processors must be sufficiently general to permit the transmission of database commands, data, and status information without error between the host and backend and also able to accomplish such transmissions with minimal overhead.", "cite_spans": [], "section": "Communication", "sec_num": null}, {"text": "In order for the impact of the communication delay between the host and backend to be minimized, the interprocessor link must be at least channel speed [MARY76b, RosE77a] . None of the previously discussed prototypes benefited from the luxury of such a high-speed connection. In these situations the experimental nature of the prototype backend DBMS precluded any hardware modifications. Thus, although performance benefits have been predicted", "cite_spans": [{"start": 152, "end": 161, "text": "[MARY76b,", "ref_id": null}, {"start": 162, "end": 170, "text": "RosE77a]", "ref_id": null}], "section": "Communication", "sec_num": null}, {"text": "I TO H O S T ' C O M M U N I C A T I O N I , EXECUTE C O N C U R R E N C Y C O N T R O L I IlO DATA BASE 0 B A C K E N D N O D E FIGURE 15. Pipelined multiple-processor backend.", "cite_spans": [], "section": "Communication", "sec_num": null}, {"text": "for backend configurations with high-speed finks by various modelers [MARY76b, RosE77a, MARY77, MARY78b], no supporting experimental data exist at this time.", "cite_spans": [], "section": "Communication", "sec_num": null}, {"text": "The problems of differing internal machine representations between the host and backend computers is not of great theoretical difficulty but nonetheless has an impact on the performance of backend database systems. Since initial backend prototypes in-volved backend minicomputers connected to mainframe hosts, the code conversion problem has already surfaced. The mapping of character and integer data between the different implementations can be accomplished in a straightforward manner, but at the cost of some additional processing for each database request.", "cite_spans": [], "section": "Machine Code Conversion", "sec_num": null}, {"text": "Other code conversion problems are more difficult to resolve. Some of the major ones follow.", "cite_spans": [], "section": "Machine Code Conversion", "sec_num": null}, {"text": "(1) Special care is required to ensure that communication control characters remain in their correct binary form during message transmission.", "cite_spans": [], "section": "Machine Code Conversion", "sec_num": null}, {"text": "(2) The variations in the positions of special characters and letters with regard to digits within the numerous collating sequences can result in records being maintained in different order and the resequencing of report entries when a backend DBMS replaces a single-machine system.", "cite_spans": [], "section": "Machine Code Conversion", "sec_num": null}, {"text": "(3) Floating point numbers, although fortunately rare in database applications, cannot be converted exactly between machines with different word sizes.", "cite_spans": [], "section": "Machine Code Conversion", "sec_num": null}, {"text": "In the first Kansas State prototypes, all code conversion is performed by the communication software on the IBM machine [MARY79], since less processing overhead is incurred by the more powerful mainframes than if conversion took place on the minicomputers. New architectures are being designed with firmware or hardwired instructions for translation between EBCDIC and ASCII. Such features would minimize the conversion overhead in a backend DBMS.", "cite_spans": [], "section": "Machine Code Conversion", "sec_num": null}, {"text": "Perhaps the ideal approach to the code conversion problem is to eliminate it entirely by use of plug-compatible host and backend processors. The increase in performance can then be attained by the removal of the conversion overhead. This approach argues strongly for the use of compatibleprocessors in a backend DBMS.", "cite_spans": [], "section": "Machine Code Conversion", "sec_num": null}, {"text": "The incompatibility of hardware and software supplied by different vendors gives rise to the problem of software portability in a backend DBMS. Ideally the commu-nication, database, and interface modules of a backend DBMS all should be easily transportable to different architectures. In order to realize this goal, the modules must be implemented in common high-level languages. Many large enterprises find it necessary to construct backend database systems using various processors as backend machines in different configurations. Consequently, a need for portable software exists to provide compatibility and reduce development costs. It is hoped that the utilization of optimizing compilers for highlevel system development languages will eliminate most of the execution time inefficiencies.", "cite_spans": [], "section": "Portability", "sec_num": null}, {"text": "In addition to the technical issues discussed previously, marketing problems have hampered the entrance of backend database systems into the commercial sector. While the technical dilemmas certainly appear surmountable, the issues of the marketplace are much more subtle. Naturally, the fact that the backend DBMS is a new concept does cause hesitation among potential customers. However this problem has been faced many times in the past. A backend DBMS is a combined hardware-software product--a database management package on a minicomputer that can be attached to a customer's mainframe. Very few vendors have the expertise to develop and support both the hardware and software of a backend DBMS. The problems of communication, code conversion, and portability compound the dilemma for prospective vendors.", "cite_spans": [], "section": "Marketing", "sec_num": null}, {"text": "In spite of the marketing obstacles, the need for backend database systems in the user community will cause some vendors to develop marketable systems. The efforts by Cullinane and MRI described earler are indicative of the vendor recognition of the commercial potential of the backend DBMS.", "cite_spans": [], "section": "Marketing", "sec_num": null}, {"text": "This tutorial has focused on backend database systems, beginning with the birth of the concept as a response to the need of overtaxed mainframes, through a description of several research efforts in this area, to an analysis of the implementation problems hindering the developers of commercial systems. Although this paper indicates an absence of vendor-supplied backend database systems, many users have embarked upon projects to produce homegrown systems. Unfortunately, the nature of these projects precludes their description in the general literature.", "cite_spans": [], "section": "CONCLUSION", "sec_num": "6."}, {"text": "Since its initial presentation in 1974, the concept of the backend DBMS has unleashed a flurry of research and development activity. The architecture of backend databases is now well defined, as are the performance problems that must be overcome if the backend DBMS concept is to become a commercial reality. Future developments on backend databases and the related subjects of database machines and distributed databases promise to be among the most significant in computer science in the next few years.", "cite_spans": [], "section": "CONCLUSION", "sec_num": "6."}, {"text": "The views expressed in this paper are those of the author and do not necessarily express the views of Digital Equipment Corporation. ", "cite_spans": [], "section": "CONCLUSION", "sec_num": "6."}, {"text": "ComputingSurveys, Vol. 12, No. 1, March 1980", "cite_spans": [], "section": "", "sec_num": null}, {"text": "DECEMBER 1979Computing Surveys, Vol. 12.,No. 1,March 1980", "cite_spans": [], "section": "", "sec_num": null}], "bib_entries": {"BIBREF1": {"ref_id": "b1", "title": "Data base networks--an overview", "authors": [{"first": "F", "middle": [], "last": "Aschim", "suffix": ""}], "dblp_id": null, "year": 1974, "venue": "Manage. Inf", "volume": "3", "issue": "1", "pages": "12--28", "other_ids": {}, "num": null, "urls": [], "raw_text": "ASCHIM, F. \"Data base networks--an overview,\" Manage. Inf. 3, 1 (Feb. 1974) 12-28.", "links": null}, "BIBREF3": {"ref_id": "b3", "title": "Data base machines", "authors": [{"first": "P", "middle": ["B"], "last": "Berra", "suffix": ""}], "dblp_id": "conf/sigmod/Su78", "year": 1977, "venue": "ACM SIGIR Newsletter", "volume": "", "issue": "", "pages": "4--23", "other_ids": {}, "num": null, "urls": [], "raw_text": "BERRA, P.B. Data base machines, ACM SIGIR Newsletter, Winter 1977, pp. 4-23.", "links": null}, "BIBREF4": {"ref_id": "b4", "title": "The architecture of concurrent programs", "authors": [{"first": "Brin ; Brinch", "middle": [], "last": "Hansen", "suffix": ""}, {"first": "P", "middle": [], "last": "", "suffix": ""}], "dblp_id": null, "year": 1977, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "BRIN77 BRINCH HANSEN, P. The architecture of concurrent programs, Prentice-Hall, En- glewood Cliffs, N.J., 1977.", "links": null}, "BIBREF5": {"ref_id": "b5", "title": "A back-end computer for data base management", "authors": [{"first": "R", "middle": ["E"], "last": "Cana ; Canaday", "suffix": ""}, {"first": "R", "middle": ["D"], "last": "Harrison", "suffix": ""}, {"first": "E", "middle": ["L"], "last": "Ivie", "suffix": ""}, {"first": "J", "middle": ["L"], "last": "Ryder", "suffix": ""}, {"first": "L", "middle": ["A"], "last": "Wehr", "suffix": ""}], "dblp_id": null, "year": 1974, "venue": "Commun. A C M", "volume": "17", "issue": "10", "pages": "575--582", "other_ids": {}, "num": null, "urls": [], "raw_text": "CANA74 CANADAY, R. E., HARRISON, R. D., IVIE, E. L., RYDER, J. L, AND WEHR, L.A. \"A back-end computer for data base manage- ment,\" Commun. A C M 17, 10 (Oct 1974) 575--582.", "links": null}, "BIBREF6": {"ref_id": "b6", "title": "Data base management systems", "authors": [{"first": "A", "middle": ["E"], "last": "Cardenas", "suffix": ""}], "dblp_id": null, "year": 1979, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "CARD79 CARDENAS, A. E. Data base manage- ment systems, Allyn & Bacon, Boston, 1979.", "links": null}, "BIBREF8": {"ref_id": "b8", "title": "CODASYL Data Description Language", "authors": [], "dblp_id": null, "year": null, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "CODASYL Data Description Language", "links": null}, "BIBREF10": {"ref_id": "b10", "title": "Special section on data encryption", "authors": [{"first": "", "middle": [], "last": "Surveys", "suffix": ""}], "dblp_id": null, "year": 1979, "venue": "Special Editor)", "volume": "11", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "COMPUTING SURVEYS, \"Special section on data encryption\" (P. J. Denning, Special Editor) 11, 4 (Dec. 1979).", "links": null}, "BIBREF11": {"ref_id": "b11", "title": "Commercial data management processor study", "authors": [{"first": "J", "middle": [], "last": "Cullinane", "suffix": ""}, {"first": "R", "middle": [], "last": "Goldman", "suffix": ""}, {"first": "T", "middle": [], "last": "Meurer", "suffix": ""}, {"first": "R", "middle": [], "last": "Navarawa", "suffix": ""}], "dblp_id": null, "year": 1975, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "CULLINANE, J., GOLDMAN, R., MEURER, T., AND NAVARAWA, R. Commercial data management processor study, Cul- linane Corp., Wellesley, Mass., Dec. 1975.", "links": null}, "BIBREF12": {"ref_id": "b12", "title": "An introduction to database systems", "authors": [{"first": "C", "middle": ["J"], "last": "Date", "suffix": ""}], "dblp_id": null, "year": 1977, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "DATE, C. J. An introduction to data- base systems, 2nd ed., Addison-Wesley, Reading, Mass., 1977.", "links": null}, "BIBREF13": {"ref_id": "b13", "title": "Fundamentals @database systems", "authors": [{"first": "S", "middle": ["M"], "last": "Deen", "suffix": ""}], "dblp_id": null, "year": 1977, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "DEEN, S.M. Fundamentals @database systems, Hayden, Rochelle Park, N.J., 1977.", "links": null}, "BIBREF14": {"ref_id": "b14", "title": "Distributed data bases: A summary of research", "authors": [{"first": "M", "middle": ["E"], "last": "Deppe", "suffix": ""}, {"first": "J", "middle": ["P"], "last": "Fry", "suffix": ""}], "dblp_id": null, "year": 1976, "venue": "Comput. Networks", "volume": "1", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "DEPPE, M. E., AND FRY, J. P. \"Dis- tributed data bases: A summary of re- search,\" Comput. Networks 1, 2 (1976).", "links": null}, "BIBREF15": {"ref_id": "b15", "title": "Data integrity considerations in computer based accounting systems", "authors": [{"first": "D", "middle": ["S"], "last": "Dhalival", "suffix": ""}, {"first": "B", "middle": ["R"], "last": "Konsynski", "suffix": ""}], "dblp_id": "conf/acm/DhaliwalK77", "year": 1977, "venue": "Proc. ACM Ann. Conf", "volume": "", "issue": "", "pages": "6--10", "other_ids": {}, "num": null, "urls": [], "raw_text": "DHALIVAL, D. S., AND KONSYNSKI, B. R. \"Data integrity considerations in computer based accounting systems,\" in Proc. ACM Ann. Conf., Oct. 1977, pp. 6- 10.", "links": null}, "BIBREF16": {"ref_id": "b16", "title": "Data base contamination and recovery", "authors": [{"first": "M", "middle": [], "last": "Edelberg", "suffix": ""}], "dblp_id": "conf/sigmod/Edelberg74", "year": 1974, "venue": "Proc. ACM SIG-MOD Conf", "volume": "", "issue": "", "pages": "419--430", "other_ids": {}, "num": null, "urls": [], "raw_text": "EDELBERG, M. \"Data base contamina- tion and recovery,\" in Proc. ACM SIG- MOD Conf., May 1974, pp. 419.-430.", "links": null}, "BIBREF17": {"ref_id": "b17", "title": "Concurrent programming of a user envelope in a distributed data base management system", "authors": [{"first": "M", "middle": ["W"], "last": "Farrell", "suffix": ""}], "dblp_id": null, "year": 1979, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "FARRELL, M.W. \"Concurrent program- ming of a user envelope in a distributed data base management system,\" M.S. the- sis, Computer Science Dept., Kansas State Univ., Manhattan, Kans., March 1979.", "links": null}, "BIBREF18": {"ref_id": "b18", "title": "Data base integrity as provided for by a particular data base management system", "authors": [{"first": "B", "middle": ["M"], "last": "Fossum", "suffix": ""}], "dblp_id": "conf/ds/Fossum74", "year": 1974, "venue": "Data Base Management Systems", "volume": "", "issue": "", "pages": "221--288", "other_ids": {}, "num": null, "urls": [], "raw_text": "FossuM, B.M. \"Data base integrity as provided for by a particular data base management system,\" in Data Base Man- agement Systems, Kimble, J. W., and Koffeman, K. L. (Eds.), North-Holland, Amsterdam, April 1974, pp. 221-288.", "links": null}, "BIBREF19": {"ref_id": "b19", "title": "Data base recovery at CMIC", "authors": [{"first": "N", "middle": ["J"], "last": "Giordano", "suffix": ""}, {"first": "M", "middle": ["S"], "last": "Schwartz", "suffix": ""}], "dblp_id": "conf/sigmod/GiordanoS76", "year": 1976, "venue": "Proc. ACM SIGMOD Conf", "volume": "", "issue": "", "pages": "33--42", "other_ids": {}, "num": null, "urls": [], "raw_text": "GIORDANO, N. J., AND SCHWARTZ, M. S. \"Data base recovery at CMIC,\" in Proc. ACM SIGMOD Conf., June 1976, pp. 33- 42.", "links": null}, "BIBREF20": {"ref_id": "b20", "title": "Distributed database technology: An assessment", "authors": [{"first": "W", "middle": ["T"], "last": "Hardgrave", "suffix": ""}], "dblp_id": null, "year": 1978, "venue": "Inf. Manage", "volume": "1", "issue": "4", "pages": "157--167", "other_ids": {}, "num": null, "urls": [], "raw_text": "HARDGRAVE, W.T. \"Distributed data- base technology: An assessment,\" Inf. Manage. 1, 4 (Aug. 1978) 157-167.", "links": null}, "BIBREF21": {"ref_id": "b21", "title": "Secure database management study", "authors": [{"first": "H", "middle": ["R"], "last": "Hartson", "suffix": ""}], "dblp_id": null, "year": 1978, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "HARTSON, H.R. \"Secure database man- agement study,\" U.S. Army AIRMICS, Atlanta, Ga., Dec. 1978.", "links": null}, "BIBREF22": {"ref_id": "b22", "title": "An experiment in dedicated data management", "authors": [{"first": "H", "middle": ["C"], "last": "Heacox", "suffix": ""}, {"first": "", "middle": ["E S"], "last": "Cosloy", "suffix": ""}, {"first": "J", "middle": ["B"], "last": "Cohen", "suffix": ""}], "dblp_id": "conf/vldb/HeacoxCC75", "year": 1975, "venue": "Conf. Very Large Data Bases", "volume": "", "issue": "", "pages": "511--513", "other_ids": {}, "num": null, "urls": [], "raw_text": "HEACOX, H. C., COSLOY. E. S., AND COHEN, J.B. \"An experiment in dedi- cated data management,\" in Conf. Very Large Data Bases, Sept. 1975, pp. 511- 513.", "links": null}, "BIBREF23": {"ref_id": "b23", "title": "An implementation of a distributed data base management system", "authors": [{"first": "R", "middle": ["D"], "last": "Housh", "suffix": ""}], "dblp_id": null, "year": 1978, "venue": "", "volume": "76", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "HousH, R.D. \"An implementation of a distributed data base management sys- tem,\" M.S. thesis, Computer Science Dept., Kansas State Univ., Manhattan, Kans., 1978. HSIA78 HSIA79 HUTC78 KIM79 LANG79 LOWE76 LOWE77 MARI75 MART77 MARY76a MARY76b MARY76C MARY77 MARY78a MARY78b", "links": null}, "BIBREF24": {"ref_id": "b24", "title": "Relevant aspects of the database computer work to mihiary security and applications", "authors": [{"first": "D", "middle": ["K"], "last": "Hsiao", "suffix": ""}], "dblp_id": null, "year": 1978, "venue": "U.S. Army AIRMICS Workshop on DBMS", "volume": "", "issue": "", "pages": "102--113", "other_ids": {}, "num": null, "urls": [], "raw_text": "HSIAO, D.K., \"Relevant aspects of the database computer work to mihiary se- curity and applications,\" in U.S. Army AIRMICS Workshop on DBMS, July 1978, pp. 102-113.", "links": null}, "BIBREF25": {"ref_id": "b25", "title": "Special issue on database machines", "authors": [{"first": "D", "middle": ["K"], "last": "Hsiao", "suffix": ""}, {"first": "E", "middle": ["D"], "last": "", "suffix": ""}], "dblp_id": null, "year": 1979, "venue": "Computer (IEEE)", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "HSIAO, D. K., ED. \"Special issue on database machines,\" Computer (IEEE), March 1979.", "links": null}, "BIBREF26": {"ref_id": "b26", "title": "MADMAN machine", "authors": [{"first": "J", "middle": ["S"], "last": "Hutchison", "suffix": ""}, {"first": "W", "middle": ["G"], "last": "Roman", "suffix": ""}], "dblp_id": "conf/sigmod/HutchisonR78", "year": 1978, "venue": "Workshop on Computer Architecture for Non-Numeric Processing", "volume": "", "issue": "", "pages": "85--90", "other_ids": {}, "num": null, "urls": [], "raw_text": "HUTCHISON, J. S., AND ROMAN, W.G. \"MADMAN machine,\" in Work- shop on Computer Architecture for Non- Numeric Processing, Aug. 1978, pp. 85- 90.", "links": null}, "BIBREF27": {"ref_id": "b27", "title": "Relational database systems", "authors": [{"first": "W", "middle": [], "last": "Kim", "suffix": ""}], "dblp_id": null, "year": 1979, "venue": "Comput. Surv", "volume": "11", "issue": "3", "pages": "185--211", "other_ids": {}, "num": null, "urls": [], "raw_text": "KIM, W. \"Relational database systems,\" Comput. Surv. 11, 3 (Sept. 1979) 185--211.", "links": null}, "BIBREF28": {"ref_id": "b28", "title": "Special issue on database machines", "authors": [{"first": "G", "middle": ["G"], "last": "Langdon", "suffix": ""}, {"first": "", "middle": [], "last": "Jr", "suffix": ""}, {"first": "", "middle": [], "last": "Ed", "suffix": ""}], "dblp_id": null, "year": 1979, "venue": "IEEE Trans. Comput. C", "volume": "28", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "LANGDON, G. G., JR., ED. \"Special issue on database machines,\" IEEE Trans. Comput. C-28, 6 (June 1979).", "links": null}, "BIBREF29": {"ref_id": "b29", "title": "The backend computer", "authors": [{"first": "E", "middle": ["I"], "last": "Lowenthal", "suffix": ""}], "dblp_id": null, "year": 1976, "venue": "Current directions in DPM development", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "LOWENTHAL, E.I. \"The backend com- puter,\" in Current directions in DPM de- velopment, Auerbach, Pennsauken, N.J., 1976.", "links": null}, "BIBREF30": {"ref_id": "b30", "title": "A survey--the application of data base management computers in distributed systems", "authors": [{"first": "E", "middle": ["I"], "last": "Lowenthal", "suffix": ""}], "dblp_id": "conf/vldb/Lowenthal77", "year": 1977, "venue": "Conf. Very Large Data Bases", "volume": "", "issue": "", "pages": "85--92", "other_ids": {}, "num": null, "urls": [], "raw_text": "LOWENTHAL, E.I. \"A survey--the ap- plication of data base management com- puters in distributed systems,\" in Conf. Very Large Data Bases, Oct. 1977, pp. 85-92.", "links": null}, "BIBREF31": {"ref_id": "b31", "title": "The datacomputer--a network data utility", "authors": [{"first": "T", "middle": [], "last": "Marill", "suffix": ""}, {"first": "D", "middle": [], "last": "Stern", "suffix": ""}], "dblp_id": "conf/afips/MarillS75", "year": null, "venue": "Proc. AFIPS 1975 Nat. Computer Conf", "volume": "44", "issue": "", "pages": "389--395", "other_ids": {}, "num": null, "urls": [], "raw_text": "MARILL, T., AND STERN, D. \"The data- computer--a network data utility,\" in Proc. AFIPS 1975 Nat. Computer Conf., vol. 44, AFIPS Press, Arlington, Va., pp. 389-395.", "links": null}, "BIBREF32": {"ref_id": "b32", "title": "Computer data-base organization", "authors": [{"first": "J", "middle": [], "last": "Martin", "suffix": ""}], "dblp_id": null, "year": 1977, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "MARTIN, J. Computer data-base orga- nization, 2nd ed., Prentice-Hall, Engle- wood Cliffs, N.J., 1977.", "links": null}, "BIBREF33": {"ref_id": "b33", "title": "An evaluation of a conversion to a backend database management system", "authors": [{"first": "F", "middle": ["J"], "last": "Maryanski", "suffix": ""}, {"first": "P", "middle": ["S"], "last": "Fisher", "suffix": ""}, {"first": "V", "middle": ["E"], "last": "Wallentine", "suffix": ""}], "dblp_id": null, "year": 1976, "venue": "Proc. ACM Ann. Conf", "volume": "", "issue": "", "pages": "293--297", "other_ids": {}, "num": null, "urls": [], "raw_text": "MARYANSKI, F. J., FISHER, P. S., AND WALLENTINE, V.E. \"An evaluation of a conversion to a backend database man- agement system,\" in Proc. ACM Ann. Conf., Oct. 1976, pp. 293-297.", "links": null}, "BIBREF34": {"ref_id": "b34", "title": "A simulation model of a backend data base management system", "authors": [{"first": "F", "middle": ["J"], "last": "Maryanski", "suffix": ""}, {"first": "V", "middle": ["E"], "last": "Wallentine", "suffix": ""}], "dblp_id": null, "year": 1976, "venue": "Pittsburgh Modeling and Simulation Conf", "volume": "", "issue": "", "pages": "243--248", "other_ids": {}, "num": null, "urls": [], "raw_text": "MARYANSKI, F. J., AND WALLENTINE, V.E. \"A simulation model of a backend data base management system,\" in Pitts- burgh Modeling and Simulation Conf., April 1976, pp. 243-248.", "links": null}, "BIBREF35": {"ref_id": "b35", "title": "A mira'computer based distributed data base system", "authors": [{"first": "F", "middle": ["J"], "last": "Maryanski", "suffix": ""}, {"first": "V", "middle": ["E"], "last": "Wallentine", "suffix": ""}, {"first": "P", "middle": ["S"], "last": "Fisher", "suffix": ""}, {"first": "M", "middle": ["A"], "last": "Calhoun", "suffix": ""}, {"first": "L", "middle": [], "last": "Ser-R~owitz", "suffix": ""}], "dblp_id": null, "year": 1976, "venue": "NBS IEEE Trend and Applications Symp. Micro and Mini Systems", "volume": "", "issue": "", "pages": "113--117", "other_ids": {}, "num": null, "urls": [], "raw_text": "MARYANSKI, F. J., WALLENTINE, V. E., FISHER, P. S., CALHOUN, M. A., AND SER- r~OWITZ, L. \"A mira'computer based dis- tributed data base system,\" in NBS IEEE Trend and Applications Symp. Micro and Mini Systems, May 1976, pp. 113- 117.", "links": null}, "BIBREF36": {"ref_id": "b36", "title": "Performance of multi-processor backend data base systems", "authors": [{"first": "F", "middle": ["J"], "last": "Maryanski", "suffix": ""}], "dblp_id": null, "year": 1977, "venue": "Conf. Information Science and Systems", "volume": "", "issue": "", "pages": "437--441", "other_ids": {}, "num": null, "urls": [], "raw_text": "MARYANSKI, F. J. \"Performance of multi-processor backend data base sys- tems,\" in Conf. Information Science and Systems, Aug. 1977, pp. 437-441.", "links": null}, "BIBREF37": {"ref_id": "b37", "title": "A survey of developments in distributed data base management systems", "authors": [{"first": "V", "middle": ["J"], "last": "Maryanski", "suffix": ""}], "dblp_id": null, "year": 1978, "venue": "Computer (IEEE)", "volume": "11", "issue": "2", "pages": "28--38", "other_ids": {}, "num": null, "urls": [], "raw_text": "MARYANSKI, V.J. \"A survey of devel- opments in distributed data base manage- ment systems,\" Computer (IEEE) 11, 2 (Feb. 1978) 28-38.", "links": null}, "BIBREF38": {"ref_id": "b38", "title": "The effects of distributed processing in a data processing environment", "authors": [{"first": "F", "middle": ["J"], "last": "Maryanski", "suffix": ""}, {"first": "D", "middle": ["E"], "last": "Kreimer", "suffix": ""}], "dblp_id": null, "year": 1978, "venue": "Annual Simulation Syrup", "volume": "12", "issue": "", "pages": "183--197", "other_ids": {}, "num": null, "urls": [], "raw_text": "MARYANSKI, F. J., AND KREIMER, D.E. \"The effects of distributed pro- cessing in a data processing environ- ment,\" in Annual Simulation Syrup., March 1978, pp. 183-197. Computing Surveys, Vol. 12, No. 1, March 1980 MARY78C MARY79 MILL78 NOLA77 OZKA77 PEEB75 PEEB78 ROSE77a RosE77b", "links": null}, "BIBREF39": {"ref_id": "b39", "title": "Distributed data base management using minicomputers", "authors": [{"first": "F", "middle": ["J"], "last": "Maryanski", "suffix": ""}, {"first": "V", "middle": ["E"], "last": "Wallentine", "suffix": ""}, {"first": "P", "middle": ["S"], "last": "Fisher", "suffix": ""}, {"first": "M", "middle": ["A"], "last": "Calhoun", "suffix": ""}], "dblp_id": null, "year": 1978, "venue": "Minis versus Mainframes", "volume": "", "issue": "", "pages": "141--157", "other_ids": {}, "num": null, "urls": [], "raw_text": "MARYANSKI, F. J., WALLENTINE, V. E., FISHER, P. S., AND CALHOUN, M.A. \"Distributed data base manage- ment using minicomputers,\" in Minis ver- sus Mainframes, Infotech State-of-the- Art Rep., 1978, pp. 141-157.", "links": null}, "BIBREF40": {"ref_id": "b40", "title": "A prototype distributed DBMS", "authors": [{"first": "F", "middle": ["J"], "last": "Maryanski", "suffix": ""}, {"first": "P", "middle": ["S"], "last": "Fisher", "suffix": ""}, {"first": "R", "middle": ["D"], "last": "Housh", "suffix": ""}, {"first": "D", "middle": ["A"], "last": "Schmidt", "suffix": ""}], "dblp_id": null, "year": 1979, "venue": "Hawaii Int. Conf. System Sciences", "volume": "2", "issue": "", "pages": "205--214", "other_ids": {}, "num": null, "urls": [], "raw_text": "MARYANSKI, F. J., FISHER, P. S., HOUSH, R. D., AND SCHMIDT, D.A. \"A prototype distributed DBMS,\" in Hawaii Int. Conf. System Sciences, Jan. 1979, vol. 2, pp. 205-214.", "links": null}, "BIBREF41": {"ref_id": "b41", "title": "A survey of distributed data base management", "authors": [{"first": "M", "middle": ["W"], "last": "Miller", "suffix": ""}], "dblp_id": null, "year": 1978, "venue": "Inf. Manage", "volume": "1", "issue": "6", "pages": "243--264", "other_ids": {}, "num": null, "urls": [], "raw_text": "MILLER, M.W. \"A survey of distributed data base management,\" Inf. Manage. 1, 6 (Dec. 1978) 243-264.", "links": null}, "BIBREF42": {"ref_id": "b42", "title": "Restructuring the data processing organization for data resource management", "authors": [{"first": "R", "middle": ["L"], "last": "Nolan", "suffix": ""}], "dblp_id": "conf/ifip/Nolan77", "year": 1977, "venue": "Inf. Process", "volume": "77", "issue": "", "pages": "261--265", "other_ids": {}, "num": null, "urls": [], "raw_text": "NOLAN, R. L. \"Restructuring the data processing organization for data resource management,\" Inf. Process. 77 (Aug. 1977) 261-265.", "links": null}, "BIBREF43": {"ref_id": "b43", "title": "Performance evaluation of a relational associative processor", "authors": [{"first": "E", "middle": ["A"], "last": "Ozkarahan", "suffix": ""}, {"first": "S", "middle": ["A"], "last": "Schuster", "suffix": ""}, {"first": "K", "middle": ["C"], "last": "Sevcik", "suffix": ""}], "dblp_id": null, "year": 1977, "venue": "ACM Trans. Database Syst", "volume": "2", "issue": "2", "pages": "175--195", "other_ids": {}, "num": null, "urls": [], "raw_text": "OZKARAHAN, E. A., SCHUSTER, S. A., AND SEVCIK, K.C. \"Performance evaluation of a relational associative processor,\" ACM Trans. Database Syst. 2, 2 (June 1977) 175-195.", "links": null}, "BIBREF44": {"ref_id": "b44", "title": "A computer architecture for large (distributed) data bases", "authors": [{"first": "R", "middle": [], "last": "Peebles", "suffix": ""}, {"first": "E", "middle": [], "last": "Manning", "suffix": ""}], "dblp_id": "conf/vldb/PeeblesM75", "year": 1975, "venue": "Conf. Very Large Data Bases", "volume": "", "issue": "", "pages": "405--427", "other_ids": {}, "num": null, "urls": [], "raw_text": "PEEBLES, R., AND MANNING, E. \"A computer architecture for large (distrib- uted) data bases,\" in Conf. Very Large Data Bases, Sept. 1975, pp. 405-427.", "links": null}, "BIBREF45": {"ref_id": "b45", "title": "System architecture for distributed data management", "authors": [{"first": "R", "middle": [], "last": "Peebles", "suffix": ""}, {"first": "", "middle": [], "last": "Manning E", "suffix": ""}], "dblp_id": null, "year": 1978, "venue": "Computer (IEEE)", "volume": "11", "issue": "1", "pages": "40--47", "other_ids": {}, "num": null, "urls": [], "raw_text": "PEEBLES, R., AND MANNING E. \"System architecture for distributed data manage- ment,\" Computer (IEEE) 11, 1 (Jan. 1978), 40-47.", "links": null}, "BIBREF46": {"ref_id": "b46", "title": "An evaluation of data base management machines", "authors": [{"first": "R", "middle": ["S"], "last": "Rosenthal", "suffix": ""}], "dblp_id": null, "year": 1977, "venue": "Annual Computer Related Information System Symp", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "ROSENTHAL, R. S. \"An evaluation of data base management machines,\" in An- nual Computer Related Information Sys- tem Symp., U.S. Air Force Academy, 1977.", "links": null}, "BIBREF47": {"ref_id": "b47", "title": "The data management machine, a classification", "authors": [{"first": "R", "middle": ["S"], "last": "Rosenthal", "suffix": ""}], "dblp_id": "conf/sigmod/Rosenthal77", "year": 1979, "venue": "Work-RECEIVED FEBRUARY", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "ROSENTHAL, R. S. \"The data manage- ment machine, a classification,\" in Work- RECEIVED FEBRUARY 1979;", "links": null}, "BIBREF48": {"ref_id": "b48", "title": "ROTH77b SAYA74 SHNE76 SIBL76 Tsic77 VERH78 WALL76 shop on Computer Architecture for Non-Numeric Processing", "authors": [], "dblp_id": null, "year": 1977, "venue": "", "volume": "77", "issue": "", "pages": "35--39", "other_ids": {}, "num": null, "urls": [], "raw_text": "FINAL REVISION ACCEPTED ROTH77a ROTH77b SAYA74 SHNE76 SIBL76 Tsic77 VERH78 WALL76 shop on Computer Architecture for Non- Numeric Processing, May 1977, pp. 35- 39.", "links": null}, "BIBREF49": {"ref_id": "b49", "title": "An overview of the preliminary design of SDD-I: A system for distributed databases", "authors": [{"first": "J", "middle": ["B"], "last": "Rothnie", "suffix": ""}, {"first": "N", "middle": [], "last": "Goodman", "suffix": ""}], "dblp_id": null, "year": 1977, "venue": "Berkeley Workshop on Distributed Data Management and Computer Networks", "volume": "", "issue": "", "pages": "38--57", "other_ids": {}, "num": null, "urls": [], "raw_text": "ROTHNIE, J. B., AND GOODMAN, N. \"An overview of the preliminary design of SDD-I: A system for distributed data- bases,\" in Berkeley Workshop on Distrib- uted Data Management and Computer Networks, May 1977, pp. 38-57.", "links": null}, "BIBREF50": {"ref_id": "b50", "title": "A survey of research and development in distributed database management", "authors": [{"first": "J", "middle": ["B"], "last": "Rothnie", "suffix": ""}, {"first": "N", "middle": [], "last": "Goodman", "suffix": ""}], "dblp_id": "conf/vldb/RothnieG77", "year": 1977, "venue": "Conf. Very Large Data Bases", "volume": "", "issue": "", "pages": "48--62", "other_ids": {}, "num": null, "urls": [], "raw_text": "ROTHNIE, J. B., AND GOODMAN, N. \"A survey of research and development in distributed database management,\" in Conf. Very Large Data Bases, Oct. 1977, pp. 48-62.", "links": null}, "BIBREF51": {"ref_id": "b51", "title": "Restart and recovery in a transaction-oriented information processing system", "authors": [{"first": "H", "middle": ["H"], "last": "Sayani", "suffix": ""}], "dblp_id": "conf/sigmod/Sayani74", "year": 1974, "venue": "Proc. ACM SIGMOD Conf", "volume": "", "issue": "", "pages": "351--366", "other_ids": {}, "num": null, "urls": [], "raw_text": "SAYANI, H.H. \"Restart and recovery in a transaction-oriented information pro- cessing system,\" in Proc. ACM SIGMOD Conf., May 1974, pp. 351-366.", "links": null}, "BIBREF52": {"ref_id": "b52", "title": "Database management systems", "authors": [{"first": "B", "middle": [], "last": "Shneiderman", "suffix": ""}, {"first": "", "middle": [], "last": "Ed", "suffix": ""}], "dblp_id": null, "year": 1976, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "SHNEIDERMAN, B., ED. Database man- agement systems, AFIPS Press, Arling- ton i Va., 1976.", "links": null}, "BIBREF53": {"ref_id": "b53", "title": "Special issue on data base management systems", "authors": [{"first": "E", "middle": ["H"], "last": "Sibley", "suffix": ""}, {"first": "E", "middle": ["D"], "last": "", "suffix": ""}], "dblp_id": null, "year": 1976, "venue": "Comput. Surv", "volume": "8", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "SIBLEY, E. H., ED. \"Special issue on data base management systems,\" Comput. Surv. 8, 1 (March 1976).", "links": null}, "BIBREF54": {"ref_id": "b54", "title": "Data base management systems", "authors": [{"first": "V", "middle": ["C"], "last": "Tsichritzis", "suffix": ""}, {"first": "F", "middle": ["H"], "last": "Lochovsky", "suffix": ""}], "dblp_id": null, "year": 1977, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "TSICHRITZIS, V. C., AND LOCHOVSKY, F. H. Data base management systems, Academic Press, New York, 1977.", "links": null}, "BIBREF55": {"ref_id": "b55", "title": "Recovery techniques for database systems", "authors": [{"first": "J", "middle": ["S M"], "last": "Verhofstad", "suffix": ""}], "dblp_id": null, "year": 1978, "venue": "Comput. Surv", "volume": "10", "issue": "2", "pages": "167--196", "other_ids": {}, "num": null, "urls": [], "raw_text": "VERHOFSTAD, J. S.M. \"Recovery tech- niques for database systems,\" Comput. Surv. 10, 2 (June 1978) 167-196.", "links": null}, "BIBREF56": {"ref_id": "b56", "title": "An overview of MIMICS design", "authors": [{"first": "V", "middle": ["E"], "last": "Wallentine", "suffix": ""}, {"first": "W", "middle": ["J"], "last": "Hankley", "suffix": ""}, {"first": "P", "middle": ["S"], "last": "Fisher", "suffix": ""}, {"first": "M", "middle": ["A"], "last": "Calhoun", "suffix": ""}, {"first": "F", "middle": ["J"], "last": "Maryanski", "suffix": ""}], "dblp_id": null, "year": 1976, "venue": "TRCS", "volume": "77", "issue": "04", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "WALLENTINE, V. E., HANKLEY, W. J., FISHER, P. S., CALHOUN, M. A., AND MARYANSKI, F. J. \"An overview of MIMICS design,\" TRCS77-04, Computer Science Dept., Kansas State Univ., Man- hattan, Kans., Dec. 1976.", "links": null}}}, "ner": [{"syntactic": ["computer hardware", "software component", "database systems"], "semantic": ["software", "data-base management systems", "software component", "computer hardware", "database systems"], "union": ["software", "data-base management systems", "software component", "computer hardware", "database systems"], "enhanced": ["computer science", "management information systems", "information storage and retrieval", "computer systems"], "Metrics": [], "ProgLang": [], "Dataset": [], "MathTerm": [], "IT Framework": [], "ISO": [], "Technology": [], "Terms": ["backend", "Backend"], "TechName": []}]}