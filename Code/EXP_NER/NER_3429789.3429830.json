{"paper_id": "3429789", "header": {"generated_with": "S2ORC 1.0.0", "date_generated": "2024-03-20T17:53:04.445356Z"}, "title": "Development of NodeJS based Backend System with Multiple Storefronts for Batik Online Store", "authors": [{"first": "George", "middle": [], "last": "William", "suffix": "", "affiliation": {"laboratory": "", "institution": "Swiss German University Tangerang", "location": {"country": "Indonesia"}}, "email": "george.william@student.sgu.ac.id"}, {"first": "Randy", "middle": [], "last": "Anthony", "suffix": "", "affiliation": {"laboratory": "", "institution": "Swiss German University Tangerang", "location": {"country": "Indonesia"}}, "email": "randy.anthony@lecturer.sgu.ac.id"}, {"first": "James", "middle": [], "last": "Purnama", "suffix": "", "affiliation": {"laboratory": "", "institution": "Swiss German University Tangerang", "location": {"country": "Indonesia"}}, "email": "james.purnama@sgu.ac.id"}], "year": "", "venue": null, "identifiers": {}, "abstract": "Inibatikita is an online clothing store company which sells its products through multiple online stores, each of which is associated with a partner influencer. Currently, there exist no ecommerce solution which can accommodate this business process. This research aims to develop a system which facilitates this business process while addressing scalability for up to 50000 users. After the requirements are gathered, a system analysis is performed to compare existing ecommerce solutions with a custom solution. Post analysis, system design takes place and is swiftly followed by development and testing; finishing with deployment of the system. The results of system analysis indicate that existing ecommerce solutions aren't able to accommodate a multiple store approach, while a custom NodeJS solution is capable of doing so. Development and testing then proves that a NodeJS solution is able to fulfill the business process while accommodating 50000 users through indexing and caching. The results show that a custom NodeJS solution addresses the business requirements and scalability of inibatikita, when existing solutions could not.", "pdf_parse": {"abstract": [{"text": "Inibatikita is an online clothing store company which sells its products through multiple online stores, each of which is associated with a partner influencer. Currently, there exist no ecommerce solution which can accommodate this business process. This research aims to develop a system which facilitates this business process while addressing scalability for up to 50000 users. After the requirements are gathered, a system analysis is performed to compare existing ecommerce solutions with a custom solution. Post analysis, system design takes place and is swiftly followed by development and testing; finishing with deployment of the system. The results of system analysis indicate that existing ecommerce solutions aren't able to accommodate a multiple store approach, while a custom NodeJS solution is capable of doing so. Development and testing then proves that a NodeJS solution is able to fulfill the business process while accommodating 50000 users through indexing and caching. The results show that a custom NodeJS solution addresses the business requirements and scalability of inibatikita, when existing solutions could not.", "cite_spans": [], "section": "Abstract", "sec_num": null}], "body_text": [{"text": "Inibatikita is a batik online store company which collaborates with influencers to create and market batik products which are endorsed by said influencers. In this scenario, inibatikita takes care of the production and logistics of the product, while the influencer need only focus on marketing the product. To offer a more personalized touch to each influencer's offering, inibatikita provides a store to each influencer where they can customize their store's catalogue. The stores may have overlapping common products in addition to exclusive products which are only available to some stores. To this end, inibatikita requires a backend service that facilitates ecommerce transaction using multiple stores. Additionally, inibatikita expects to grow and have 50000 users in the next five years, which means scalability needs to be taken into account to avoid future complications. One such complication occurred with Bukalapak [7] the incident highlights that it is in the best interest for a startup company to take scalability into account when dealing with its userbase.", "cite_spans": [{"start": 928, "end": 931, "text": "[7]", "ref_id": "BIBREF6"}], "section": "Introduction", "sec_num": "1"}, {"text": "Existing solutions which facilitates Ecommerce transactions already exists in abundance, however they might lack the capability to do so while serving multiple storefronts. In the absence of a suitable service, a custom made solution would need to be created. It would ideally be in the form of a REST API to provide a clear separation of client and server in which future client products can be developed using this initial REST API as its server. Regarding scalability, the fact that a REST API is not tied down to a specific programming language means that the scalability aspect that the stakeholders desire can be achieved by selecting the platform that best suit the requirements.", "cite_spans": [], "section": "Introduction", "sec_num": "1"}, {"text": "The main problem related to the creation of inibatikita's backend service is the lack of existing solution which can accommodate the company's business process. In addition, inibatikita's aims to have 50000 users in the next five years, which means the system should be able to handle this said amount.", "cite_spans": [], "section": "Introduction", "sec_num": "1"}, {"text": "The objective of this paper is to find a backend service solution for inibatikita that: 1. Accommodates multiple storefronts which connects to the same backend 2. Accommodates 50,000 users If there are none, the objective will then be to develop a backend service which accommodates the two points above.", "cite_spans": [], "section": "Introduction", "sec_num": "1"}, {"text": "The questions this paper aims to answer are: Question 1: Are existing Ecommerce solutions suitable for inibatikita's business process? Question 2: Can a custom solution based on NodeJS be made suitable for inibatikita's business process? Question 3: What customizations are able to make NodeJS and MySQL scalable for inibatikita?", "cite_spans": [], "section": "Introduction", "sec_num": "1"}, {"text": "With the following hypothesis: Hypothesis 1: Existing Ecommerce solutions are not suitable for inibatikita's business process Hypothesis 2: A suitable solution can be made using NodeJS for inibatikita's business process Hypothesis 3: Caching and indexing are able to make NodeJS and MySQL scalable for inibatikita The study will be limited to: 1. Analysis of existing Ecommerce solutions for inibatikita's business process 2. Development of a custom NodeJS based solution Due to financial constraints, the research will be done with a limited budget, thus any solution which incurs cost exceeding the budget will not be possible. In addition, Stress testing will be done in a local environment, because the server provider's policy of not facilitating a high-traffic testing without the risk of acquiring a penalty.", "cite_spans": [], "section": "Introduction", "sec_num": "1"}, {"text": "Duboc et al. [2] suggested scalability to be an evaluation of causal impact on a system's measured qualities precipitated by scaling variables, determined by the system stakeholder. In this definition, there exist no universal standard as to what constitutes a scalable system, instead the system stakeholder will decide:", "cite_spans": [{"start": 13, "end": 16, "text": "[2]", "ref_id": "BIBREF1"}], "section": "A framework for characterization and analysis of software system scalability", "sec_num": "2.1"}, {"text": "\u2022 Scaling dimension, objects which the system will be expected to handle in magnitudes.", "cite_spans": [], "section": "A framework for characterization and analysis of software system scalability", "sec_num": "2.1"}, {"text": "Non-scaling dimension, fixed variables which enables the calculation of scaling dimensions.", "cite_spans": [], "section": "\u2022", "sec_num": null}, {"text": "Dependent variables, these are qualities of the system which are affected by independent variables.", "cite_spans": [], "section": "\u2022", "sec_num": null}, {"text": "Through the analysis of dependent variables in regard to scaling dimensions, a system stakeholder can determine whether the system is scalable or not. ", "cite_spans": [], "section": "\u2022", "sec_num": null}, {"text": "Dewi et al. [1] implemented an Ecommerce system using WooCommerce to increase the sales of batik SMEs in Jombang.", "cite_spans": [{"start": 12, "end": 15, "text": "[1]", "ref_id": "BIBREF0"}], "section": "Batik Ecommerce using WooCommerce Plugin", "sec_num": "2.5"}, {"text": "The reasoning behind WooCommerce is the popularity and the ease of use of the technology which even though lacks depth and customization was deemed enough for the project. Inibatikita is similar in that it plans to sells batik through an online store. However, inibatikita requires a solution which is able to serve multiple stores, which WooCommerce could not fulfill.", "cite_spans": [], "section": "Batik Ecommerce using WooCommerce Plugin", "sec_num": "2.5"}, {"text": "In his work, Luong [5] attempts to find out the feasibility of creating an online store for a lighting company through the use of WordPress and WooCommerce alone. WooCommerce is", "cite_spans": [{"start": 19, "end": 22, "text": "[5]", "ref_id": "BIBREF4"}], "section": "The application and feasibility of WordPress in creating an online store: case KVS Valaistussuunnittelu Oy", "sec_num": "2.6"}, {"text": "Storefronts for Batik Online Store ICONETSI 2020, September 28-29, Tangerang, Banten, Indonesia chosen because of its popularity and vast third-party plugins ecosystem. Ultimately, Luong argues that while WooCommerce is capable of handling basic Ecommerce practices, the major hindrance for WordPress is the reliability on third-party plugins which never guarantees any compatibility sometimes leads to a degraded user shopping experience which cannot be proactively dealt with, instead they are left to wait for the third-party developers to fix their plugins.", "cite_spans": [], "section": "Development of NodeJS based Backend System with Multiple", "sec_num": null}, {"text": "This process will derive a list of features based on the business process. This list of features will then be created into a use case diagram. The use case diagram will be used as consideration to determine the suitability of using existing Ecommerce solutions (Magento community, Magento enterprise, Tokopedia) compared with creating a custom solution.", "cite_spans": [], "section": "Requirements Gathering / System Analysis", "sec_num": "3.1"}, {"text": "Based on the system analysis, a system design will take place which will produce the architecture diagram, activity diagram, and entity relationship diagram. The architecture diagram will illustrate the design of the system and its components. Activity diagram will be constructed based on the gathered requirements and show how information flow in the system. The entity relationship diagram will depict the objects in the database and how they relate with each other to form the database of the system.", "cite_spans": [], "section": "System Design", "sec_num": "3.2"}, {"text": "Development will be based on the agile scrum software development model due to its adaptable nature. ", "cite_spans": [], "section": "Development", "sec_num": "3.3"}, {"text": "The test which will be performed on the system will be based on the book \"The Art of Software Testing\" by Myers [6] :", "cite_spans": [{"start": 112, "end": 115, "text": "[6]", "ref_id": "BIBREF5"}], "section": "Testing", "sec_num": "3.4"}, {"text": "\u2022 Function testing, performed based on a set of test cases which includes a predicted and actual output. This test is carried out automatically using JMeter.", "cite_spans": [], "section": "Testing", "sec_num": "3.4"}, {"text": "Integration testing, performed together with the frontend based on a production scenario. The test is carried out by volunteers which are given a questionnaire at the end of testing. Throughout this process, the server logs every request made to the API to give a better idea of a user's activity.", "cite_spans": [], "section": "\u2022", "sec_num": null}, {"text": "Stress testing, according to IBM's general guideline [3] , to accommodate 50000 named users, the system should be able to accommodate 500 concurrent users. However, REST API operates based on requests not users, so the logged user activity from previous testing is used to determine a number of requests made per user in a period of time. In accordance to the scalability analysis framework, the variables for this test are: o Scaling dimension: number of requests o Non-scaling dimension: latency o Dependent variables: response time The test will be performed using 2 machines, a client and a server. The client runs JMeter and sends a large amount of HTTP request to the server in a span of time called the ramp-up time. The server runs a virtual machine with identical specifications to the deployment server. The two machines will be connected to the same Wi-Fi network and requests will be made through this network ", "cite_spans": [{"start": 53, "end": 56, "text": "[3]", "ref_id": "BIBREF2"}], "section": "\u2022", "sec_num": null}, {"text": "Depoyment uses Niagahoster's Virtual Private Server (VPS) with 1vCPU (2.4 GHz), 1 GB RAM, 1 TB bandwidth, 25 GB SSD, Ubuntu 16.04 Server. This setup should suffice for an initial prototype and should the need for further resources surfaces, the VPS can easily be upgraded to accommodate the requirements, whether it be processing power, main and/or secondary storage.", "cite_spans": [], "section": "Deployment", "sec_num": "3.5"}, {"text": "Figure 2 shows the use case diagram of the system based on the gathered user requirements. With the requirements gathered, to determine whether to use an existing solution or create a custom one, the comparison shown in Table 3 is created. In summary, the inability to serve multiple storefronts renders Magento Community and Tokopedia unsuitable, while the high cost of Magento Enterprise hinders its viability. Based on the table above, a decision was made to develop a custom solution based on NodeJS. Figure 6 shows the backend's different response to two requests made to the same endpoint, which demonstrates the backend's capability of serving multiple storefronts. This is done through the use of authentication tokens which is generated every time a user logs in to an influencer's store and sent along with any HTTP request the user makes. This token contains information on the user's credentials as well as the store's information. This way the REST API is able to differentiate requests coming from users of different stores and respond with relevant data. Figure 7 shows that all of the users were able to complete the test cases. They did run into some UI related issues, however that is unrelated to the backend. Overall, the frontend was able to communicate with the backend to perform a production scenario.", "cite_spans": [], "section": "Requirements Gathering / System Analysis", "sec_num": "4.1"}, {"text": "Testing. The request used for stress testing will be made to the endpoints in the browse products feature, since they are the most prone to high traffic based on the user activity log. The ramp-up period for this test will be 10 seconds, and according to the user activity log, an average user makes around 3-6 requests in the span of 10 seconds. For 500 users, that means 3000 requests. So, JMeter will send an increasing amount of request up to 3000. Table 6 shows the result of the stress testing throughout the iterations of the system. Version 1, which is its initial version experienced a significant spike as requests reach 500, this trend continues all the way to 3000 requests. This increase is attributed to the MySQL service consuming high percentage of CPU and memory. Version 2 attempts to mitigate this problem through indexing the tables [8] . The improvements of which is most noticeable in low traffic, yet the spike at 500 requests onwards remains. Version 3 implements caching [10] on top of version 2's indexing, which allows identical requests made in a short amount of time to only trigger a MySQL query for the first request, and serve that same data to the rest, effectively minimizing MySQL calls. Naturally, this method is not suited to data that frequently changes, however for the product catalogue which only changes once a day, it is excellent. The result is a significant improvement even in high traffic requests which the system is able to respond in under 150ms.", "cite_spans": [{"start": 853, "end": 856, "text": "[8]", "ref_id": "BIBREF7"}, {"start": 996, "end": 1000, "text": "[10]", "ref_id": "BIBREF9"}], "section": "Stress", "sec_num": "4.4.3"}, {"text": "The improvement in response time is illustrated in Figure 8 above which shows a slight improvement indexing made and the significant improvement that caching brought. After caching and indexing, the server is able to handle 3000 requests while keeping the response time in the great user experience category.", "cite_spans": [], "section": "Figure 8: Comparison of average response time", "sec_num": null}, {"text": "Deployment is done through VPS running Ubuntu 16.04. The deployment server is accessed through SSH and installs all dependencies related to the service. The server then clones the git repository which contains the backend service. Followed by the building process and finally the service is executed in background. The deployment database is truncated, exported, and sent to the server using SFTP. In addition, an SSL certificate is generated using Let's Encrypt as the certificate authority, and all requests to the server are served using HTTPS.", "cite_spans": [], "section": "Deployment", "sec_num": "4.5"}, {"text": "Through this paper, it has been shown that inibatikita's business process couldn't be handled using existing ecommerce solutions.", "cite_spans": [], "section": "Conclusions", "sec_num": "5"}, {"text": "Essentially, the requirement to serve multiple stores was not satisified by Magento Community and Tokopedia, while Magento Enterprise's high cost made it unfeasible. Development and testing proved that a custom NodeJS solution is able to handle the business process by providing ecommerce features and serving them through multiple stores. Addressing the issue of scalability, the implementation of indexing and caching is able to let the system meet the scalability requirement of 50000 users by accommodating 3000 requests in a span of 10 seconds. However, indexing is less effective as the number of requests increase.", "cite_spans": [], "section": "Conclusions", "sec_num": "5"}], "bib_entries": {"BIBREF0": {"ref_id": "b0", "title": "Perancangan dan Implementasi Sistem E-Commerce pada UMKM Batik di Kabupaten Jombang", "authors": [{"first": "Sari", "middle": [], "last": "Renny", "suffix": ""}, {"first": "Oki", "middle": [], "last": "Dewi", "suffix": ""}, {"first": "Candra", "middle": [], "last": "Anita", "suffix": ""}, {"first": "Rizky", "middle": [], "last": "Dewi", "suffix": ""}, {"first": "", "middle": [], "last": "Noviasari", "suffix": ""}], "dblp_id": null, "year": 2019, "venue": "Din. J. Pengabdi. Kpd. Masy", "volume": "3", "issue": "1", "pages": "36--43", "other_ids": {"DOI": ["10.31849/dinamisia.v3i1.2061"]}, "num": null, "urls": [], "raw_text": "Renny Sari Dewi, Oki Anita Candra Dewi, and Rizky Noviasari. 2019. Perancangan dan Implementasi Sistem E-Commerce pada UMKM Batik di Kabupaten Jombang. Din. J. Pengabdi. Kpd. Masy. 3, 1 (2019), 36-43. DOI:https://doi.org/10.31849/dinamisia.v3i1.2061", "links": null}, "BIBREF1": {"ref_id": "b1", "title": "A framework for characterization and analysis of software system scalability", "authors": [{"first": "Leticia", "middle": [], "last": "Duboc", "suffix": ""}, {"first": "David", "middle": [], "last": "Rosenblum", "suffix": ""}, {"first": "Tony", "middle": [], "last": "Wicks", "suffix": ""}], "dblp_id": "conf/sigsoft/DubocRW07", "year": 2007, "venue": "6th Jt. Meet", "volume": "2007", "issue": "", "pages": "375--384", "other_ids": {"DOI": ["10.1145/1287624.1287679"]}, "num": null, "urls": [], "raw_text": "Leticia Duboc, David Rosenblum, and Tony Wicks. 2007. A framework for characterization and analysis of software system scalability. 6th Jt. Meet. Eur. Softw. Eng. Conf. ACM SIGSOFT Symp. Found. Softw. Eng. ESEC/FSE 2007 (2007), 375-384. DOI:https://doi.org/10.1145/1287624.1287679", "links": null}, "BIBREF2": {"ref_id": "b2", "title": "Estimating Concurrent Users", "authors": [], "dblp_id": null, "year": null, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "IBM. Estimating Concurrent Users. Retrieved from https://www.ibm.com/support/knowledgecenter/SSEP7J_10.2.1/com.ibm.swg. ba.cognos.crn_arch.10.2.1.doc/c_arch_estimatingconcurrentusers.html", "links": null}, "BIBREF3": {"ref_id": "b3", "title": "Performance comparison and evaluation of web development technologies in PHP, Python and Node", "authors": [{"first": "Kai", "middle": [], "last": "Lei", "suffix": ""}, {"first": "Yining", "middle": [], "last": "Ma", "suffix": ""}, {"first": "Zhi", "middle": [], "last": "Tan", "suffix": ""}], "dblp_id": "conf/cse/LeiMT14", "year": 2015, "venue": "Proc. -17th IEEE Int. Conf. Comput. Sci. Eng. CSE 2014, Jointly with 13th IEEE Int. Conf. Ubiquitous Comput. Commun. IUCC 2014, 13th Int. Symp. Pervasive Syst", "volume": "", "issue": "", "pages": "661--668", "other_ids": {"DOI": ["10.1109/CSE.2014.142"]}, "num": null, "urls": [], "raw_text": "Kai Lei, Yining Ma, and Zhi Tan. 2015. Performance comparison and evaluation of web development technologies in PHP, Python and Node.js. Proc. -17th IEEE Int. Conf. Comput. Sci. Eng. CSE 2014, Jointly with 13th IEEE Int. Conf. Ubiquitous Comput. Commun. IUCC 2014, 13th Int. Symp. Pervasive Syst. December (2015), 661-668. DOI:https://doi.org/10.1109/CSE.2014.142", "links": null}, "BIBREF4": {"ref_id": "b4", "title": "The application and feasibility of WordPress in creating an online store: case KVS Valaistussuunnittelu Oy", "authors": [{"first": "", "middle": [], "last": "Luong", "suffix": ""}], "dblp_id": null, "year": 2015, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "V Luong. 2015. The application and feasibility of WordPress in creating an online store: case KVS Valaistussuunnittelu Oy. (2015). Retrieved from https://www.theseus.fi/bitstream/handle/10024/98147/Luong_Vu.pdf?sequenc e=1", "links": null}, "BIBREF5": {"ref_id": "b5", "title": "The Art of Software Testing", "authors": [{"first": "Glenford", "middle": [], "last": "Myers", "suffix": ""}], "dblp_id": "journals/stvr/Reid05", "year": 2004, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {"DOI": ["10.1002/stvr.322"]}, "num": null, "urls": [], "raw_text": "Glenford Myers. 2004. The Art of Software Testing (2nd ed.). New Jersey. DOI:https://doi.org/10.1002/stvr.322", "links": null}, "BIBREF6": {"ref_id": "b6", "title": "Server Down, Bukalapak Di-Bully Netizen. Tempo.co", "authors": [{"first": "Dewi", "middle": [], "last": "Nurita", "suffix": ""}], "dblp_id": null, "year": 2018, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "Dewi Nurita. 2018. Server Down, Bukalapak Di-Bully Netizen. Tempo.co. Retrieved from https://bisnis.tempo.co/read/1093243/server-down-bukalapak- di-bully-netizen/full&view=ok", "links": null}, "BIBREF7": {"ref_id": "b7", "title": "MySQL :: MySQL 8", "authors": [], "dblp_id": null, "year": 2020, "venue": "0 Reference Manual", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "Oracle Corporation. 2020. MySQL :: MySQL 8.0 Reference Manual :: 8.3.5 Column Indexes. Retrieved from https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html", "links": null}, "BIBREF8": {"ref_id": "b8", "title": "Using the MEAN stack to implement a RESTful service for an Internet of Things application", "authors": [{"first": "Andrew", "middle": ["John"], "last": "Poulter", "suffix": ""}, {"first": "Steven", "middle": ["J"], "last": "Johnston", "suffix": ""}, {"first": "Simon", "middle": ["J"], "last": "Cox", "suffix": ""}], "dblp_id": "conf/wf-iot/PoulterJC15", "year": 2015, "venue": "IEEE World Forum Internet Things, WF-IoT 2015 -Proc", "volume": "", "issue": "", "pages": "280--285", "other_ids": {"DOI": ["10.1109/WF-IoT.2015.7389066"]}, "num": null, "urls": [], "raw_text": "Andrew John Poulter, Steven J. Johnston, and Simon J. Cox. 2015. Using the MEAN stack to implement a RESTful service for an Internet of Things application. IEEE World Forum Internet Things, WF-IoT 2015 -Proc. (2015), 280- 285. DOI:https://doi.org/10.1109/WF-IoT.2015.7389066", "links": null}, "BIBREF9": {"ref_id": "b9", "title": "Performance Best Practices Using Express in Production", "authors": [], "dblp_id": null, "year": 2017, "venue": "", "volume": "", "issue": "", "pages": "", "other_ids": {}, "num": null, "urls": [], "raw_text": "StrongLoop and IBM. 2017. Performance Best Practices Using Express in Production. Retrieved from https://expressjs.com/en/advanced/best-practice- performance.html#cache-request-results", "links": null}}}, "ner": [{"syntactic": ["systems design", "business process", "business requirement"], "semantic": ["business process management", "business process", "systems design", "business requirement", "ebusiness"], "union": ["systems design", "business requirement", "business process management", "ebusiness", "business process"], "enhanced": ["intelligent control", "intelligent systems", "information technology", "information systems"], "Metrics": [], "ProgLang": ["NodeJS"], "Dataset": [], "MathTerm": [], "IT Framework": [], "ISO": [], "Technology": [], "Terms": [], "TechName": []}]}